/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_one_to_many;

import cz.fidentis.comparison.ComparisonMethod;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.controller.OneToManyComparison;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.gui.TableProcessing;
import cz.fidentis.gui.guisetup.OneToManyGUISetup;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.ResultExports;
import cz.fidentis.undersampling.Methods;
import cz.fidentis.undersampling.Type;
import cz.fidentis.visualisation.ColorScheme;
import cz.fidentis.visualisation.ColorSelector;
import cz.fidentis.visualisation.histogram.histogramPanel;
import cz.fidentis.visualisation.surfaceComparison.HDpainting;
import cz.fidentis.visualisation.surfaceComparison.HDpaintingInfo;
import cz.fidentis.visualisation.surfaceComparison.SelectionType;
import cz.fidentis.visualisation.surfaceComparison.VisualizationType;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.vecmath.Vector3f;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
public class OneToManyComparisonResults extends javax.swing.JPanel {

    JPanel activeColorPanel;
    private boolean maxTresholdValueChanged;
    private boolean minTresholdValueChanged;
    private ColorScheme heatplotColorScheme = ColorScheme.GREEN_BLUE;
    private boolean valuesModified = false;

    /**
     * Creates new form OneToManyComparisonResults
     */
    public OneToManyComparisonResults() {
        initComponents();
        activeColorPanel = new JPanel();
    }

    public void showProcrustesControls() {
        jPanel1.setVisible(false);
        slicesPanel.setVisible(false);
        colorMapPanel.setVisible(false);
        densLabel.setVisible(false);
        density.setVisible(false);
        jPanel2.setVisible(true);
        jButton10.setVisible(false);
        jButton6.setVisible(false);
        comparisonButton.setVisible(false);
        exportOrderedResultsButton.setVisible(false);
        maxThresholdSpinner.setVisible(false);
        maxThresholdSlider.setVisible(false);
        jLabel7.setVisible(false);
        heatplotButton.setVisible(false);
        heatplotButton1.setVisible(false);
    }

    public void showHausdorfControls() {
        jLabel5.setVisible(true);
        valuesComboBox.setVisible(true);
        jPanel2.setVisible(false);
        comparisonButton.setVisible(true);
        jPanel1.setVisible(true);
        jButton10.setVisible(true);
        jButton6.setVisible(true);
        exportOrderedResultsButton.setVisible(true);
        maxThresholdSpinner.setVisible(true);
        maxThresholdSlider.setVisible(true);
        jLabel7.setVisible(true);
        heatplotButton.setVisible(true);
        heatplotButton1.setVisible(true);

        if (VisualizationBox.getSelectedItem() == VisualizationType.COLORMAP) {
            densLabel.setVisible(false);
            density.setVisible(false);
            colorMapPanel.setVisible(true);
            slicesPanel.setVisible(false);
        }
        if (VisualizationBox.getSelectedItem() == VisualizationType.VECTORS) {
            densLabel.setVisible(true);
            density.setVisible(true);
            colorMapPanel.setVisible(false);
            slicesPanel.setVisible(false);
        }
        if (VisualizationBox.getSelectedItem() == VisualizationType.CROSSSECTION) {
            densLabel.setVisible(false);
            density.setVisible(false);
            colorMapPanel.setVisible(false);
            slicesPanel.setVisible(true);
        }
        this.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        pairFrame = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox();
        pairComparisonPanel1 = new cz.fidentis.gui.PairComparisonPanel();
        jFrame4 = new javax.swing.JFrame();
        jPanel6 = new javax.swing.JPanel();
        plotsDrawingPanelAuxiliary2 = new cz.fidentis.gui.PlotsDrawingPanelAuxiliary();
        jPanel7 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        lensSlider = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();
        alignFrame = new javax.swing.JFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        alignTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        metricComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        valuesComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        VisualizationBox = new javax.swing.JComboBox();
        comparisonButton = new javax.swing.JButton();
        slicesPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        xyPlaneRadioButton = new javax.swing.JRadioButton();
        yzPlaneRadioButton = new javax.swing.JRadioButton();
        xzPlaneRadioButton = new javax.swing.JRadioButton();
        arbitraryPlaneRadioButton = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        xArbitrarySpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        yArbitrarySpinner = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        zArbitrarySpinner = new javax.swing.JSpinner();
        zPositionSpinner = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        yPositionSpinner = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        xPositionSpinner = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        crosscutSizeSlider = new javax.swing.JSlider();
        highlightCutsCheckBox = new javax.swing.JCheckBox();
        samplingRaysCheckBox = new javax.swing.JCheckBox();
        allCutsCheckBox = new javax.swing.JCheckBox();
        showVectorsCheckBox = new javax.swing.JCheckBox();
        crosscutColorPanel = new javax.swing.JPanel();
        crosscutThicknessSlider = new javax.swing.JSlider();
        densLabel1 = new javax.swing.JLabel();
        densLabel2 = new javax.swing.JLabel();
        boxplotCheckBox = new javax.swing.JCheckBox();
        boxplotContinuousCheckBox = new javax.swing.JCheckBox();
        showPlaneCheckBox = new javax.swing.JCheckBox();
        colorMapPanel = new javax.swing.JPanel();
        histogram1 = new cz.fidentis.visualisation.histogram.histogramPanel();
        jLabel7 = new javax.swing.JLabel();
        maxThresholdSlider = new javax.swing.JSlider();
        maxThresholdSpinner = new javax.swing.JSpinner();
        selectionButton = new javax.swing.JToggleButton();
        jButton8 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        colorSchemeComboBox = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        minThreshSlider = new javax.swing.JSlider();
        minThreshSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        fpDistanceSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        fpSizeSlider = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        density = new javax.swing.JSlider();
        densLabel = new javax.swing.JLabel();
        heatplotButton = new javax.swing.JButton();
        exportOrderedResultsButton = new javax.swing.JButton();
        heatplotButton1 = new javax.swing.JButton();
        alignParametersButton = new javax.swing.JButton();
        cylLengthLabel = new javax.swing.JLabel();
        cylLength = new javax.swing.JSlider();
        cylRadius = new javax.swing.JSlider();
        cylRadiusLabel = new javax.swing.JLabel();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        colorDialog.getAccessibleContext().setAccessibleParent(this);

        jDialog1.setModal(true);
        jDialog1.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        jDialog1.setName("Numerical results "); // NOI18N
        jDialog1.getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable3.setColumnSelectionAllowed(true);
        jTable3.getTableHeader().setResizingAllowed(false);
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable3);

        jDialog1.getContentPane().add(jScrollPane1);

        jFrame1.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable1);

        jFrame1.getContentPane().add(jScrollPane3);

        jScrollPane4.setBorder(null);
        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridLayout(0, 1, 1, 0));
        jScrollPane4.setViewportView(jPanel5);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel1.text")); // NOI18N

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Diverging", "Rainbow" }));
        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane4)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4))
        );

        javax.swing.GroupLayout pairFrameLayout = new javax.swing.GroupLayout(pairFrame.getContentPane());
        pairFrame.getContentPane().setLayout(pairFrameLayout);
        pairFrameLayout.setHorizontalGroup(
            pairFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pairFrameLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pairComparisonPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE))
        );
        pairFrameLayout.setVerticalGroup(
            pairFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pairComparisonPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        plotsDrawingPanelAuxiliary2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plotsDrawingPanelAuxiliary2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout plotsDrawingPanelAuxiliary2Layout = new javax.swing.GroupLayout(plotsDrawingPanelAuxiliary2);
        plotsDrawingPanelAuxiliary2.setLayout(plotsDrawingPanelAuxiliary2Layout);
        plotsDrawingPanelAuxiliary2Layout.setHorizontalGroup(
            plotsDrawingPanelAuxiliary2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 557, Short.MAX_VALUE)
        );
        plotsDrawingPanelAuxiliary2Layout.setVerticalGroup(
            plotsDrawingPanelAuxiliary2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel19, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel19.text")); // NOI18N

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Diverging", "Rainbow" }));
        jComboBox4.setSelectedIndex(1);
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel20, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel20.text")); // NOI18N

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Relative", "Absolute" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        lensSlider.setMaximum(1000);
        lensSlider.setToolTipText(org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.lensSlider.toolTipText")); // NOI18N
        lensSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lensSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel10.text")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lensSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lensSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plotsDrawingPanelAuxiliary2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotsDrawingPanelAuxiliary2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jFrame4Layout = new javax.swing.GroupLayout(jFrame4.getContentPane());
        jFrame4.getContentPane().setLayout(jFrame4Layout);
        jFrame4Layout.setHorizontalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jFrame4Layout.setVerticalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        alignFrame.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        alignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        alignTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        alignTable.setColumnSelectionAllowed(true);
        alignTable.getTableHeader().setResizingAllowed(false);
        alignTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(alignTable);

        alignFrame.getContentPane().add(jScrollPane5);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel2.text")); // NOI18N

        metricComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Root Mean Square", "Arithmetic Mean", "Geometric Mean", "Minimal Distance", "Maximal Distance", "Variance", "75 percentil" }));
        metricComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.metricComboBox.toolTipText")); // NOI18N
        metricComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel5.text")); // NOI18N

        valuesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Relative", "Absolute" }));
        valuesComboBox.setMinimumSize(new java.awt.Dimension(115, 206));
        valuesComboBox.setPreferredSize(new java.awt.Dimension(115, 20));
        valuesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valuesComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel3.text")); // NOI18N

        VisualizationBox.setModel(new javax.swing.DefaultComboBoxModel(VisualizationType.values()));
        VisualizationBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualizationBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel3)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VisualizationBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valuesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(metricComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metricComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valuesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VisualizationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(comparisonButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.comparisonButton.text")); // NOI18N
        comparisonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comparisonButtonActionPerformed(evt);
            }
        });

        slicesPanel.setName(""); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel8.text")); // NOI18N

        buttonGroup1.add(xyPlaneRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(xyPlaneRadioButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.xyPlaneRadioButton.text")); // NOI18N
        xyPlaneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xyPlaneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(yzPlaneRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(yzPlaneRadioButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.yzPlaneRadioButton.text")); // NOI18N
        yzPlaneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yzPlaneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(xzPlaneRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(xzPlaneRadioButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.xzPlaneRadioButton.text")); // NOI18N
        xzPlaneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xzPlaneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(arbitraryPlaneRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(arbitraryPlaneRadioButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.arbitraryPlaneRadioButton.text")); // NOI18N
        arbitraryPlaneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arbitraryPlaneRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel9.text")); // NOI18N
        jLabel9.setEnabled(false);

        xArbitrarySpinner.setModel(new javax.swing.SpinnerNumberModel(1.0f, null, null, 0.1f));
        xArbitrarySpinner.setEnabled(false);
        xArbitrarySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xArbitrarySpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel12.text")); // NOI18N
        jLabel12.setEnabled(false);

        yArbitrarySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        yArbitrarySpinner.setEnabled(false);
        yArbitrarySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yArbitrarySpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel13.text")); // NOI18N
        jLabel13.setEnabled(false);

        zArbitrarySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));
        zArbitrarySpinner.setEnabled(false);
        zArbitrarySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zArbitrarySpinnerStateChanged(evt);
            }
        });

        zPositionSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.5f));
        zPositionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zPositionSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel14.text")); // NOI18N

        yPositionSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.5f));
        yPositionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yPositionSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel15.text")); // NOI18N

        xPositionSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.5f));
        xPositionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xPositionSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel16.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel17, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel17.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel18, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel18.text")); // NOI18N

        crosscutSizeSlider.setMajorTickSpacing(10);
        crosscutSizeSlider.setMinimum(10);
        crosscutSizeSlider.setMinorTickSpacing(5);
        crosscutSizeSlider.setPaintLabels(true);
        crosscutSizeSlider.setPaintTicks(true);
        crosscutSizeSlider.setToolTipText(org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.crosscutSizeSlider.toolTipText")); // NOI18N
        fpDistanceSlider.setValue(10);
        crosscutSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                crosscutSizeSliderStateChanged(evt);
            }
        });

        highlightCutsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(highlightCutsCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.highlightCutsCheckBox.text")); // NOI18N
        highlightCutsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightCutsCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(samplingRaysCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.samplingRaysCheckBox.text")); // NOI18N
        samplingRaysCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samplingRaysCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(allCutsCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.allCutsCheckBox.text")); // NOI18N
        allCutsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCutsCheckBoxActionPerformed(evt);
            }
        });

        showVectorsCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(showVectorsCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.showVectorsCheckBox.text")); // NOI18N
        showVectorsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showVectorsCheckBoxActionPerformed(evt);
            }
        });

        crosscutColorPanel.setBackground(new java.awt.Color(255, 255, 255));
        crosscutColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        crosscutColorPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        crosscutColorPanel.setEnabled(false);
        crosscutColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crosscutColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout crosscutColorPanelLayout = new javax.swing.GroupLayout(crosscutColorPanel);
        crosscutColorPanel.setLayout(crosscutColorPanelLayout);
        crosscutColorPanelLayout.setHorizontalGroup(
            crosscutColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        crosscutColorPanelLayout.setVerticalGroup(
            crosscutColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        crosscutThicknessSlider.setMaximum(80);
        crosscutThicknessSlider.setMinimum(10);
        density.setVisible(false);
        densLabel.setVisible(false);
        crosscutThicknessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                crosscutThicknessSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(densLabel1, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.densLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(densLabel2, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.densLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(boxplotCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.boxplotCheckBox.text")); // NOI18N
        boxplotCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxplotCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(boxplotContinuousCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.boxplotContinuousCheckBox.text")); // NOI18N
        boxplotContinuousCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxplotContinuousCheckBoxActionPerformed(evt);
            }
        });

        showPlaneCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(showPlaneCheckBox, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.showPlaneCheckBox.text")); // NOI18N
        showPlaneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPlaneCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout slicesPanelLayout = new javax.swing.GroupLayout(slicesPanel);
        slicesPanel.setLayout(slicesPanelLayout);
        slicesPanelLayout.setHorizontalGroup(
            slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slicesPanelLayout.createSequentialGroup()
                .addComponent(densLabel2)
                .addGap(18, 18, 18)
                .addComponent(crosscutColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(slicesPanelLayout.createSequentialGroup()
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addComponent(densLabel1)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slicesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crosscutSizeSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(crosscutThicknessSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(slicesPanelLayout.createSequentialGroup()
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arbitraryPlaneRadioButton)
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(xyPlaneRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(yzPlaneRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(xzPlaneRadioButton))))
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(31, 31, 31)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xArbitrarySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yArbitrarySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zArbitrarySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(highlightCutsCheckBox)
                            .addComponent(showPlaneCheckBox))
                        .addGap(23, 23, 23)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(boxplotCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(boxplotContinuousCheckBox))
                            .addGroup(slicesPanelLayout.createSequentialGroup()
                                .addComponent(showVectorsCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(allCutsCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(samplingRaysCheckBox)))))
                .addGap(16, 18, Short.MAX_VALUE))
        );
        slicesPanelLayout.setVerticalGroup(
            slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slicesPanelLayout.createSequentialGroup()
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xyPlaneRadioButton)
                    .addComponent(jLabel8)
                    .addComponent(yzPlaneRadioButton)
                    .addComponent(xzPlaneRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arbitraryPlaneRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xArbitrarySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(yArbitrarySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(zArbitrarySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(yPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(zPositionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(slicesPanelLayout.createSequentialGroup()
                        .addComponent(crosscutSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(crosscutThicknessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(densLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(densLabel2)
                            .addComponent(crosscutColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(highlightCutsCheckBox)
                            .addComponent(showVectorsCheckBox)
                            .addComponent(allCutsCheckBox)
                            .addComponent(samplingRaysCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(slicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showPlaneCheckBox)
                    .addComponent(boxplotCheckBox)
                    .addComponent(boxplotContinuousCheckBox))
                .addContainerGap())
        );

        Hashtable<Integer, JLabel> labels =
        new Hashtable<Integer, JLabel>();
        labels.put(10, new JLabel("1"));
        labels.put(20, new JLabel("2"));
        labels.put(30, new JLabel("3"));
        labels.put(40, new JLabel("4"));
        labels.put(50, new JLabel("5"));
        labels.put(60, new JLabel("6"));
        labels.put(70, new JLabel("7"));
        labels.put(80, new JLabel("8"));
        labels.put(90, new JLabel("9"));
        labels.put(100, new JLabel("10"));
        crosscutSizeSlider.setLabelTable(labels);

        histogram1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                histogram1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout histogram1Layout = new javax.swing.GroupLayout(histogram1);
        histogram1.setLayout(histogram1Layout);
        histogram1Layout.setHorizontalGroup(
            histogram1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        histogram1Layout.setVerticalGroup(
            histogram1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel7.text")); // NOI18N

        maxThresholdSlider.setMajorTickSpacing(20);
        maxThresholdSlider.setMinorTickSpacing(5);
        maxThresholdSlider.setPaintLabels(true);
        maxThresholdSlider.setPaintTicks(true);
        maxThresholdSlider.setValue(75);
        maxThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxThresholdSliderStateChanged(evt);
            }
        });

        maxThresholdSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        maxThresholdSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxThresholdSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(selectionButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.selectionButton.text")); // NOI18N
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton8, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton8.text")); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rectangle", "Ellipse" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        colorSchemeComboBox.setModel(new javax.swing.DefaultComboBoxModel(ColorScheme.values()));
        colorSchemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSchemeComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel21, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel21.text")); // NOI18N

        minThreshSlider.setMajorTickSpacing(20);
        minThreshSlider.setMinorTickSpacing(5);
        minThreshSlider.setPaintLabels(true);
        minThreshSlider.setPaintTicks(true);
        minThreshSlider.setValue(0);
        minThreshSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minThreshSliderStateChanged(evt);
            }
        });

        minThreshSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        minThreshSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minThreshSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout colorMapPanelLayout = new javax.swing.GroupLayout(colorMapPanel);
        colorMapPanel.setLayout(colorMapPanelLayout);
        colorMapPanelLayout.setHorizontalGroup(
            colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorMapPanelLayout.createSequentialGroup()
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorMapPanelLayout.createSequentialGroup()
                        .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minThreshSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(maxThresholdSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maxThresholdSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(minThreshSpinner)))
                    .addComponent(colorSchemeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(colorMapPanelLayout.createSequentialGroup()
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorMapPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(selectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(colorMapPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(histogram1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)))
                .addContainerGap())
        );
        colorMapPanelLayout.setVerticalGroup(
            colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorMapPanelLayout.createSequentialGroup()
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(maxThresholdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minThreshSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minThreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(colorSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(histogram1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(colorMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionButton)
                    .addComponent(jButton8)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        fpDistanceSlider.setMajorTickSpacing(20);
        fpDistanceSlider.setMinorTickSpacing(5);
        fpDistanceSlider.setPaintLabels(true);
        fpDistanceSlider.setPaintTicks(true);
        fpDistanceSlider.setValue(0);
        fpDistanceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpDistanceSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sizeLabel, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.sizeLabel.text")); // NOI18N

        fpSizeSlider.setMajorTickSpacing(20);
        fpSizeSlider.setMaximum(50);
        fpSizeSlider.setMinimum(10);
        fpSizeSlider.setMinorTickSpacing(5);
        fpSizeSlider.setPaintLabels(true);
        fpSizeSlider.setPaintTicks(true);
        fpSizeSlider.setValue(30);
        fpSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpSizeSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fpDistanceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fpSizeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fpDistanceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton10, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton10.text")); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton7, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.jButton7.text")); // NOI18N
        jButton7.setMaximumSize(new java.awt.Dimension(300, 28));
        jButton7.setMinimumSize(new java.awt.Dimension(280, 28));
        jButton7.setPreferredSize(new java.awt.Dimension(281, 28));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        density.setMajorTickSpacing(10);
        density.setMinorTickSpacing(5);
        density.setPaintLabels(true);
        density.setPaintTicks(true);
        density.setValue(10);
        density.setVisible(false);
        densLabel.setVisible(false);
        density.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                densityStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(densLabel, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.densLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(heatplotButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.heatplotButton.text")); // NOI18N
        heatplotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatplotButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportOrderedResultsButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.exportOrderedResultsButton.text")); // NOI18N
        exportOrderedResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportOrderedResultsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(heatplotButton1, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.heatplotButton1.text")); // NOI18N
        heatplotButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatplotButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(alignParametersButton, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.alignParametersButton.text")); // NOI18N
        alignParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignParametersButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cylLengthLabel, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.cylLengthLabel.text")); // NOI18N

        cylLength.setMajorTickSpacing(1);
        cylLength.setMaximum(10);
        cylLength.setMinimum(1);
        cylLength.setPaintLabels(true);
        cylLength.setPaintTicks(true);
        cylLength.setSnapToTicks(true);
        cylLength.setValue(1);
        cylLength.setVisible(false);  cylLengthLabel.setVisible(false);
        cylLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cylLengthStateChanged(evt);
            }
        });

        cylRadius.setMajorTickSpacing(1);
        cylRadius.setMaximum(10);
        cylRadius.setMinimum(1);
        cylRadius.setPaintLabels(true);
        cylRadius.setPaintTicks(true);
        cylRadius.setValue(1);
        cylRadius.setVisible(false);
        cylRadiusLabel.setVisible(false);
        cylRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cylRadiusStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cylRadiusLabel, org.openide.util.NbBundle.getMessage(OneToManyComparisonResults.class, "OneToManyComparisonResults.cylRadiusLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 230, Short.MAX_VALUE))
                    .addComponent(slicesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(cylRadiusLabel)
                        .addGap(15, 15, 15)
                        .addComponent(cylRadius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alignParametersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(heatplotButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(heatplotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportOrderedResultsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comparisonButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cylLengthLabel)
                            .addComponent(densLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(density, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cylLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slicesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(density, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(densLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cylLengthLabel)
                    .addComponent(cylLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cylRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cylRadiusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorMapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comparisonButton)
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportOrderedResultsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heatplotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heatplotButton1)
                .addGap(10, 10, 10)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alignParametersButton)
                .addGap(24, 24, 24)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        jScrollPane2.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1478, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        activeColorPanel.setBackground(jColorChooser1.getColor());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void exportOrderedResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportOrderedResultsButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        List<ArrayList<Float>> numResults = getContext().getNumResults();
        List<Float> thresholdedValues;
        thresholdedValues = SurfaceComparisonProcessing.instance().compareOneToManyVariation(numResults, getContext().getHausdorfMaxTreshold() / 100f,
                getContext().getHausdorfMinTreshold() / 100f, tc.getProject().getSelectedOneToManyComparison().getMetricTypeIndex(),
                getContext().getValuesTypeIndex() == 0);
        ResultExports.instance().exportCSVnumericOrder(tc, thresholdedValues, getContext().getModels());
    }//GEN-LAST:event_exportOrderedResultsButtonActionPerformed

    private void heatplotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatplotButtonActionPerformed
        if (getContext().getNumericalResults() != null) {
            jPanel4.setVisible(true);
            pairComparisonPanel1.clear();
            setHeatPlotLabels();

            pairFrame.setTitle(
                    "Pairwise results");
            Image icon = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);

            pairFrame.setIconImage(icon);

            pairFrame.setVisible(
                    true);
            pairFrame.setSize(
                    1000, 700);
            pairFrame.setLocationRelativeTo(GUIController.getSelectedProjectTopComponent());

        }
    }//GEN-LAST:event_heatplotButtonActionPerformed

    private void setHeatPlotLabels() {
        //    int m = result.split("\n").length;
        int n = getContext().getNumericalResults().split("\n")[0].split(";").length;
        String[] valuesString = new String[n];
        String[] namesString = new String[n];

        namesString = getContext().getNumericalResults().split("\n")[0].split(";");
        valuesString = getContext().getNumericalResults().split("\n")[1].split(";");
        float values[] = new float[n - 1];
        float maxValue = Float.MIN_VALUE;
        float minValue = Float.MAX_VALUE;

        for (int i = 1; i < n; i++) {
            values[i - 1] = Float.valueOf(valuesString[i]);
            if (values[i - 1] > maxValue) {
                maxValue = values[i - 1];
            }
            if (values[i - 1] < minValue) {
                minValue = values[i - 1];
            }
        }
        float distance = maxValue - minValue;
        jPanel5.removeAll();
        for (int i = 0; i < n - 1; i++) {
            final int j = i;
            JLabel l = new JLabel(namesString[i + 1]);
            //   JLabel l2 = new JLabel(namesString[i+1]);
            l.setToolTipText(Float.toString(values[i]));
            //  l.setText(Float.toString(values[i]));
            float v = values[i];
            v = v - minValue;
            ColorSelector s = new ColorSelector();
            Color b = s.chooseColor(0, distance, v, heatplotColorScheme);
            /*Color b = Color.getHSBColor(v, 1, 1);*/
            l.setBackground(b);
            // l.setForeground(b);
            l.setOpaque(true);
            //  jPanel5.add(l2);;
            jPanel5.add(l);
            l.setLocation(0, 31 * i);
            l.setSize(jPanel5.getWidth(), 30);
            l.setPreferredSize(new Dimension(jPanel5.getWidth(), 30));
            l.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    pairFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    OneToManyComparison bc = getContext();

                    // pairComparisonPanel1.clear();
                    pairComparisonPanel1.getListener().removeModel();
                    List<File> models;
                    if (bc.getRegistrationMethod() == RegistrationMethod.NO_REGISTRATION) {
                        models = bc.getModels();
                    } else {
                        models = bc.getRegisteredModels();
                    }

                    Model primary = bc.getPrimaryModel();
                    pairComparisonPanel1.getListener().addModel(primary);
                    pairComparisonPanel1.getListener().addModel(ModelLoader.instance().loadModel(models.get(j), false, false));
                    pairFrame.setTitle("Pairwise results - " + primary.getName() + " vs. " + models.get(j).getName());

                    List<Float> values = bc.getNumResults().get(j);
                    HDpaintingInfo info = new HDpaintingInfo(values, primary, true);
                    HDpainting hdp = new HDpainting(info);
                    pairComparisonPanel1.getListener().setHdPaint(hdp);
                    pairComparisonPanel1.getListener().setHdInfo(info);
                    pairComparisonPanel1.setInfo(hdp);
                    pairComparisonPanel1.getListener().setPaintHD(true);
                    pairComparisonPanel1.revalidate();
                    pairComparisonPanel1.repaint();
                    pairFrame.setCursor(Cursor.getDefaultCursor());
                }

            }
            );

        }
        jPanel5.revalidate();
        jPanel5.repaint();

    }


    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        getContext().setState(2);
        GUIController.getConfigurationTopComponent().addOneToManyComparisonComponent();

        Model m = ModelLoader.instance().loadModel(getContext().getModel(0), false, true);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().drawHD(false);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setProcrustes(false);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setModel1(getContext().getPrimaryModel());
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setModel2(m);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setFacialPoints(
                getContext().getFacialPoints(m.getName())
        );

        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().rotationAndSizeRestart();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        //no export of avg face?
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().saveRegisteredModelsOneToMany(tc, getContext().getRegisteredModels(),
                getContext().getModels(),
                getContext().getPrimaryModel(), "_1n");
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * This method saves current visualisation shown in the panel after pushing
     * saving button into a png file
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        if (getContext().getComparisonMethod() == ComparisonMethod.PROCRUSTES) {
            ResultExports.instance().exportVisualResults(tc, tc.getOneToManyViewerPanel().getListener2(), 1920, 1920);
        } else if (getContext().getHdPaintingInfo() != null && getContext().getHdPaintingInfo().getvType() == VisualizationType.CROSSSECTION){
            ResultExports.instance().exportVisualResults(tc, tc.getOneToManyViewerPanel().getListener1(), tc.getOneToManyViewerPanel().getListener2(), 1920, 1920);
        }else {
            ResultExports.instance().exportVisualResults(tc, tc.getOneToManyViewerPanel().getListener1(), 1920, 1920);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().saveAuxOneToMany(tc, getContext().getNumResults(),
                getContext().getHd(),
                getContext().getModels(),
                tc.getOneToManyViewerPanel().getListener1().getModel().getName(), getContext().getValuesTypeIndex() == 0);
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * This method is help method for saving numerical result as table
     *
     * @param file results should be saved into this file
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().exportCSVnumeric(tc, getContext().getNumericalResults());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (getContext().getNumericalResults() != null) {
            String[][] values = TableProcessing.instance().parseTable(getContext().getNumericalResults());

            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    values,
                    values[0]
            ));
        }

        TableProcessing.instance().setUpTable(jTable1, jFrame1, GUIController.getSelectedProjectTopComponent(), "Numerical results");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fpSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpSizeSliderStateChanged

        if (getContext().getComparisonMethod() == ComparisonMethod.PROCRUSTES) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().getPaInfo().setPointSize(fpSizeSlider.getValue() * 3);
            getContext().setFpSize(fpSizeSlider.getValue());
        }
    }//GEN-LAST:event_fpSizeSliderStateChanged

    private void fpDistanceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpDistanceSliderStateChanged
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().getPaInfo().setEnhance(fpDistanceSlider.getValue());
        repaint();
        getContext().setFpDistance(fpDistanceSlider.getValue());
    }//GEN-LAST:event_fpDistanceSliderStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem().equals(SelectionType.RECTANGLE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.RECTANGLE);
        }
        if (jComboBox1.getSelectedItem().equals(SelectionType.ELLIPSE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.ELLIPSE);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().clearSelection();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
        if (jComboBox1.getSelectedItem().equals(SelectionType.RECTANGLE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.RECTANGLE);
        }
        if (jComboBox1.getSelectedItem().equals(SelectionType.ELLIPSE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.ELLIPSE);
        }
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setSelection(selectionButton.isSelected());
    }//GEN-LAST:event_selectionButtonActionPerformed

    private void maxThresholdSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxThresholdSpinnerStateChanged
        if (!maxTresholdValueChanged
                && getContext().getComparisonMethod() != ComparisonMethod.PROCRUSTES) {
            maxTresholdValueChanged = true;
            getContext().setHausdorfMaxTreshold(Integer.valueOf(maxThresholdSpinner.getValue().toString()));
            maxThresholdSlider.setValue(getContext().getHausdorfMaxTreshold());
            setMaxThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_maxThresholdSpinnerStateChanged

    private void maxThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxThresholdSliderStateChanged
        if (!maxTresholdValueChanged
                && getContext().getComparisonMethod() != ComparisonMethod.PROCRUSTES) {
            maxTresholdValueChanged = true;
            getContext().setHausdorfMaxTreshold(maxThresholdSlider.getValue());
            maxThresholdSpinner.setValue(getContext().getHausdorfMaxTreshold());

            setMaxThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_maxThresholdSliderStateChanged


    private void showVectorsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showVectorsCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setShowVectors(showVectorsCheckBox.isSelected());
        getContext().setShowVectors(showVectorsCheckBox.isSelected());
    }//GEN-LAST:event_showVectorsCheckBoxActionPerformed

    private void allCutsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCutsCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setShowAllCuts(allCutsCheckBox.isSelected());
        getContext().setAllCuts(allCutsCheckBox.isSelected());
    }//GEN-LAST:event_allCutsCheckBoxActionPerformed

    private void samplingRaysCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samplingRaysCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setShowSamplingRays(samplingRaysCheckBox.isSelected());
        getContext().setSamplingRays(samplingRaysCheckBox.isSelected());
    }//GEN-LAST:event_samplingRaysCheckBoxActionPerformed

    private void highlightCutsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightCutsCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener1().setHighlightCuts(highlightCutsCheckBox.isSelected());
        getContext().setHighlightCuts(highlightCutsCheckBox.isSelected());
    }//GEN-LAST:event_highlightCutsCheckBoxActionPerformed

    private void crosscutSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_crosscutSizeSliderStateChanged
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().setVectroScale(crosscutSizeSlider.getValue() / (float) 10);
        getContext().setCrosscutSize(crosscutSizeSlider.getValue());
    }//GEN-LAST:event_crosscutSizeSliderStateChanged

    private void xPositionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xPositionSpinnerStateChanged
        if (!valuesModified) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlanePoint(new Vector3f((float) xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue()), true);
            getContext().setPlanePosition((float)xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue());
        }
    }//GEN-LAST:event_xPositionSpinnerStateChanged

    private void yPositionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yPositionSpinnerStateChanged
        if (!valuesModified) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlanePoint(new Vector3f((float) xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue()), true);
            getContext().setPlanePosition((float)xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue());
        }
    }//GEN-LAST:event_yPositionSpinnerStateChanged

    private void zPositionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zPositionSpinnerStateChanged
        if (!valuesModified) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlanePoint(new Vector3f((float) xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue()), true);
            getContext().setPlanePosition((float)xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue());
        }
    }//GEN-LAST:event_zPositionSpinnerStateChanged

    private void zArbitrarySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zArbitrarySpinnerStateChanged
        if (zArbitrarySpinner.isEnabled() && !valuesModified) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f((float) xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue()), true);
            getContext().setArbitraryPlanePos((float)xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue());
        }
    }//GEN-LAST:event_zArbitrarySpinnerStateChanged

    private void yArbitrarySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yArbitrarySpinnerStateChanged
        if (yArbitrarySpinner.isEnabled() && !valuesModified) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f((float) xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue()), true);
            getContext().setArbitraryPlanePos((float)xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue());
        }
    }//GEN-LAST:event_yArbitrarySpinnerStateChanged

    private void xArbitrarySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xArbitrarySpinnerStateChanged
        if (xArbitrarySpinner.isEnabled() && !valuesModified) {
            GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f((float) xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue()), true);
            getContext().setArbitraryPlanePos((float)xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue());
        }
    }//GEN-LAST:event_xArbitrarySpinnerStateChanged

    private void arbitraryPlaneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arbitraryPlaneRadioButtonActionPerformed
        if (arbitraryPlaneRadioButton.isSelected()) {
            setNormalControlsEnabled(true);
        }
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f((float) xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue()), true);
        getContext().setCrossCutPlaneIndex(4);
    }//GEN-LAST:event_arbitraryPlaneRadioButtonActionPerformed

    private void xzPlaneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xzPlaneRadioButtonActionPerformed
        setNormalControlsEnabled(false);
        xArbitrarySpinner.setValue(0f);
        yArbitrarySpinner.setValue(1f);
        zArbitrarySpinner.setValue(0f);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f(0f, 1f, 0f), true);

        getContext().setCrossCutPlaneIndex(3);
    }//GEN-LAST:event_xzPlaneRadioButtonActionPerformed

    private void yzPlaneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yzPlaneRadioButtonActionPerformed
        setNormalControlsEnabled(false);
        xArbitrarySpinner.setValue(1f);
        yArbitrarySpinner.setValue(0f);
        zArbitrarySpinner.setValue(0f);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f(1f, 0f, 0f), true);

        getContext().setCrossCutPlaneIndex(1);
    }//GEN-LAST:event_yzPlaneRadioButtonActionPerformed

    private void xyPlaneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xyPlaneRadioButtonActionPerformed
        setNormalControlsEnabled(false);
        xArbitrarySpinner.setValue(0f);
        yArbitrarySpinner.setValue(0f);
        zArbitrarySpinner.setValue(1f);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().setPlaneNormal(new Vector3f(0f, 0f, 1f), true);

        getContext().setCrossCutPlaneIndex(0);
    }//GEN-LAST:event_xyPlaneRadioButtonActionPerformed

    private void comparisonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comparisonButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final OneToManyComparison c = getContext();
        Runnable run = new Runnable() {

            @Override
            public void run() {
                ProgressHandle p;
                List<Float> hdDistance = c.getHd();
                List<ArrayList<Float>> numResults = c.getNumResults();
                List<Float> thresholdedValues;
                List<File> origModels = c.getModels();

                p = ProgressHandleFactory.createHandle("Computing comparison...");
                p.start();

                try {

                    if (c.getValuesTypeIndex() == 1) {         //absolute is set
                        List<Float> absolute = new ArrayList<Float>();
                        for (Float hdDistance1 : hdDistance) {
                            absolute.add(Math.abs(hdDistance1));
                        }

                        hdDistance = absolute;
                    }

                    HDpaintingInfo info = c.getHdPaintingInfo();

                    setupVisualizationControls(info);

                    info.setDensity(c.getVectorDensity());
                    info.setCylLengthFactor(c.getVectorLength());
                    info.setCylRadius(c.getCylinderRadius());
                    info.setIndicesForNormals(info.getGraph().indicesFordDensityNormals(c.getVectorDensity()));
                    info.setRecompute(true);

                    thresholdedValues = SurfaceComparisonProcessing.instance().compareOneToManyVariation(numResults, c.getHausdorfMaxTreshold() / 100f,
                            c.getHausdorfMinTreshold() / 100f, c.getMetricTypeIndex(), c.getValuesTypeIndex() == 0);

                    String res = SurfaceComparisonProcessing.instance().formatedNumResOneToMany(thresholdedValues, origModels, c.getPrimaryModel().getName(),
                            c.getHausdorfMaxTreshold(), c.getHausdorfMinTreshold(), c.getMetricTypeIndex());

                    info.setDistance(hdDistance);
                    info.setUseRelative(c.getValuesTypeIndex() == 0);
                    c.setNumericalResults(res);

                    p.finish();

                    /*if (GUIController.getSelectedProjectTopComponent() == tc) {
                        GUIController.getConfigurationTopComponent().addOneToManyComparisonResults();
                    }*/
                    updateHistograms();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                } finally {
                    p.finish();
                }
            }
        };

        Thread t = new Thread(run);
        t.start();
    }//GEN-LAST:event_comparisonButtonActionPerformed

    
            private void setupVisualizationControls(HDpaintingInfo info) {
                final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
                final OneToManyComparison c = getContext();
                
                if (c.getVisualization() == VisualizationType.COLORMAP) {
                    tc.getOneToManyViewerPanel().getListener2().setPaintHD(false);
                    info.setvType(VisualizationType.COLORMAP);
                    tc.getOneToManyViewerPanel().getListener2().removeModel();
                    
                    Model modelShown = c.getAvgFace();
                    
                    if (modelShown == null) {
                        if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {
                            
                            File m =c.getRegisteredModels().get(0);
                            modelShown = ModelLoader.instance().loadModel(m, false, false);
                        } else {
                            File f = c.getModels().get(0);
                            modelShown = ModelLoader.instance().loadModel(f, false, true);
                        }
                    }
                    
                    tc.getOneToManyViewerPanel().getListener2().addModel(modelShown);
                    
                }
                if (c.getVisualization() == VisualizationType.VECTORS) {
                    tc.getOneToManyViewerPanel().getListener2().setPaintHD(false);
                    info.setvType(VisualizationType.VECTORS);
                    
                    Model modelShown = c.getAvgFace();
                    
                    if (modelShown == null) {
                        if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {
                            
                            File m = c.getRegisteredModels().get(0);
                            modelShown = ModelLoader.instance().loadModel(m, false, false);
                        } else {
                            File f = c.getModels().get(0);
                            modelShown = ModelLoader.instance().loadModel(f, false, true);
                        }
                    }
                    
                    tc.getOneToManyViewerPanel().getListener2().setModels(modelShown);
                }
                if (c.getVisualization() == VisualizationType.CROSSSECTION) {
                    tc.getOneToManyViewerPanel().getListener2().setSecondaryListener(true);
                    tc.getOneToManyViewerPanel().getListener2().setHdInfo(info);
                    tc.getOneToManyViewerPanel().getListener2().setPaintHD(true);
                    tc.getOneToManyViewerPanel().getListener1().setPlanePoint(c.getPlanePosition());
                    
                    ArrayList<Model> models = new ArrayList<>();
                    models.add(c.getPrimaryModel());
                    
                    
                    for (int i = 0; i < c.getRegisteredModels().size(); i++) {
                        //registered models will be null if ICP wasn't used
                        Model m = ModelLoader.instance().loadModel(c.getRegisteredModels().get(i), false, false);
                        models.add(m);
                    }
                    tc.getOneToManyViewerPanel().getListener2().setModels(models);
                    tc.getOneToManyViewerPanel().getListener1().setPrimaryModel();
                    tc.getOneToManyViewerPanel().setPlaneNormal(c.getArbitraryPlanePos(), true);
                    //  tc.getOneToManyViewerPanel().getListener1().setPlaneNormal(new Vector3f((float) normalSpinnerX.getValue(), (float) normalSpinnerY.getValue(), (float) normalSpinnerZ.getValue()));
                    
                    info.setvType(VisualizationType.CROSSSECTION);
                    
                }
            }
    
    private void VisualizationBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualizationBoxActionPerformed
        if (VisualizationBox.getSelectedItem() == VisualizationType.COLORMAP) {
            densLabel.setVisible(false);
            density.setVisible(false);
            cylLength.setVisible(false);
            cylLengthLabel.setVisible(false);
            cylRadius.setVisible(false);
            cylRadiusLabel.setVisible(false);
            colorMapPanel.setVisible(true);
            slicesPanel.setVisible(false);
        }
        if (VisualizationBox.getSelectedItem() == VisualizationType.VECTORS) {
            densLabel.setVisible(true);
            density.setVisible(true);
            cylLength.setVisible(true);
            cylLengthLabel.setVisible(true);
            cylRadius.setVisible(true);
            cylRadiusLabel.setVisible(true);
            colorMapPanel.setVisible(false);
            slicesPanel.setVisible(false);
        }
        if (VisualizationBox.getSelectedItem() == VisualizationType.CROSSSECTION) {
            densLabel.setVisible(false);
            density.setVisible(false);
            cylLength.setVisible(false);
            cylLengthLabel.setVisible(false);
            cylRadius.setVisible(false);
            cylRadiusLabel.setVisible(false);
            colorMapPanel.setVisible(false);
            slicesPanel.setVisible(true);
        }
                
        getContext().setVisualization((VisualizationType) VisualizationBox.getSelectedItem());
        
        //setupVisualizationControls takes visualization type from data model, needs to be called after
        //value in data model was set
        setupVisualizationControls(getContext().getHdPaintingInfo());
        setupVisualizationControls();
        updateHistograms();
    }//GEN-LAST:event_VisualizationBoxActionPerformed

    private void setupVisualizationControls() {
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final OneToManyComparison c = getContext();
        if (VisualizationBox.getSelectedItem().equals(VisualizationType.COLORMAP)) {
            colorMapPanel.setVisible(true);
            slicesPanel.setVisible(false);
            densLabel.setVisible(false);
            density.setVisible(false);

            c.getHdPaintingInfo().setvType(VisualizationType.COLORMAP);
            tc.getOneToManyViewerPanel().getListener2().setPaintHD(false);
            tc.getOneToManyViewerPanel().getListener2().removeModel();
            ModelLoader l = ModelLoader.instance();
            Model modelShown = c.getAvgFace();

            if (modelShown == null) {
                if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {

                    File m = c.getRegisteredModels().get(0);
                    modelShown = l.loadModel(m, false, false);
                } else {
                    File f = c.getModels().get(0);
                    modelShown = l.loadModel(f, false, true);
                }
            }

            tc.getOneToManyViewerPanel().getListener2().addModel(modelShown);

        }
        if (VisualizationBox.getSelectedItem().equals(VisualizationType.VECTORS)) {
            densLabel.setVisible(true);
            density.setVisible(true);
            colorMapPanel.setVisible(false);
            slicesPanel.setVisible(false);
            c.getHdPaintingInfo().setDensity(c.getVectorDensity());
            c.getHdPaintingInfo().setCylLengthFactor(c.getVectorLength());
            c.getHdPaintingInfo().setCylRadius(c.getCylinderRadius());
            c.getHdPaintingInfo().setIndicesForNormals(c.getHdPaintingInfo().getGraph().indicesFordDensityNormals(c.getVectorDensity()));

            tc.getOneToManyViewerPanel().getListener2().setHdInfo(c.getHdPaintingInfo());

            c.getHdPaintingInfo().setvType(VisualizationType.VECTORS);
            tc.getOneToManyViewerPanel().getListener2().setPaintHD(false);

            ModelLoader l = ModelLoader.instance();

            Model modelShown = c.getAvgFace();

            if (modelShown == null) {
                if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {

                    File m = c.getRegisteredModels().get(0);
                    modelShown = l.loadModel(m, false, false);
                } else {
                    File f = c.getModels().get(0);
                    modelShown = l.loadModel(f, false, true);
                }
            }

            tc.getOneToManyViewerPanel().getListener2().setModels(modelShown);

        }
        if (VisualizationBox.getSelectedItem().equals(VisualizationType.CROSSSECTION)) {
            densLabel.setVisible(false);
            density.setVisible(false);
            colorMapPanel.setVisible(false);
            slicesPanel.setVisible(true);

            tc.getOneToManyViewerPanel().getListener2().setSecondaryListener(true);
            tc.getOneToManyViewerPanel().getListener2().setHdInfo(c.getHdPaintingInfo());
            tc.getOneToManyViewerPanel().getListener2().setPaintHD(true);
            tc.getOneToManyViewerPanel().getListener1().setPlanePoint(c.getPlanePosition());
            ModelLoader l = ModelLoader.instance();
            ArrayList<Model> models = new ArrayList<>();
            models.add(c.getPrimaryModel());

            for (int i = 0; i < c.getRegisteredModels().size(); i++) {
                //registered models will be null if ICP wasn't used
                Model m = l.loadModel(c.getRegisteredModels().get(i), false, false);
                models.add(m);
            }
            tc.getOneToManyViewerPanel().getListener2().setModels(models);
            tc.getOneToManyViewerPanel().getListener1().setPrimaryModel();
            tc.getOneToManyViewerPanel().setPlaneNormal(c.getArbitraryPlanePos(), true);
            c.getHdPaintingInfo().setvType(VisualizationType.CROSSSECTION);

        }

    }


    private void metricComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricComboBoxActionPerformed
        getContext().setMetricTypeIndex(metricComboBox.getSelectedIndex());
    }//GEN-LAST:event_metricComboBoxActionPerformed

    public void adjustThresholds(){
         List<Float> l = getContext().getValuesTypeIndex() == 0 ? getContext().getSortedHdRel() : getContext().getSortedHdAbs();
        int count = 0;
        int count2 = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) <= getContext().getHdPaintingInfo().getMaxThreshValue()) {
                count++;
            }
            if (l.get(i) >= getContext().getHdPaintingInfo().getMinThreshValue()) {
                count2++;
            }
        }
        minTresholdValueChanged = true;
        maxTresholdValueChanged = true;
        float percent = count / (float) l.size();
        maxThresholdSlider.setValue((int) (percent * 100));
        maxThresholdSpinner.setValue((int) (percent * 100));
        float percent2 = count2 / (float) l.size();
        minThreshSlider.setValue(100 - (int) (percent2 * 100));
        minThreshSpinner.setValue(100 - (int) (percent2 * 100));
        minTresholdValueChanged = false;
        maxTresholdValueChanged = false;
      
    }
    
    private void histogram1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_histogram1MouseDragged
        List<Float> l = getContext().getValuesTypeIndex() == 0 ? getContext().getSortedHdRel() : getContext().getSortedHdAbs();
        int count = 0;
        int count2 = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) <= getContext().getHdPaintingInfo().getMaxThreshValue()) {
                count++;
            }
            if (l.get(i) >= getContext().getHdPaintingInfo().getMinThreshValue()) {
                count2++;
            }

        }
        if (histogram1.isMaxSliderSelected()) {
            float percent = count / (float) l.size();
            maxThresholdSlider.setValue((int) (percent * 100));
            getContext().setHausdorfMaxTreshold((int) (percent * 100));
        }

        if (histogram1.isMinSliderSelected()) {
            float percent2 = count2 / (float) l.size();
            minThreshSlider.setValue(100 - (int) (percent2 * 100));
            getContext().setHausdorfMinTreshold(100 - (int) (percent2 * 100));
        }
    }//GEN-LAST:event_histogram1MouseDragged

    private void heatplotButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatplotButton1ActionPerformed
        OneToManyComparison bc = getContext();

        ArrayList<ArrayList<Float>> res = new ArrayList<ArrayList<Float>>();
        /* if(jComboBox1.getSelectedIndex() == 0){
         res = bc.getHd();
         }else{*/
        res = (ArrayList<ArrayList<Float>>) bc.getNumResults();
        //  }

        float values[][] = new float[res.size()][res.get(0).size()];
        for (int i = 0; i < res.size(); i++) {
            for (int j = 0; j < res.get(0).size(); j++) {
                values[i][j] = res.get(i).get(j);
            }

        }
        String names[] = new String[bc.getModels().size()];
        int i = 0;
        for (File f : bc.getModels()) {
            names[i] = f.getName();
            i++;
        }

        plotsDrawingPanelAuxiliary2.setNames(names);
        plotsDrawingPanelAuxiliary2.setValues(values);

        plotsDrawingPanelAuxiliary2.repaint();
        jFrame4.setTitle("Auxiliary results");
        Image icon = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);
        jFrame4.setIconImage(icon);
        jFrame4.setVisible(true);
        jFrame4.setSize(500, 500);
        jFrame4.setLocationRelativeTo(GUIController.getSelectedProjectTopComponent());
        plotsDrawingPanelAuxiliary2.revalidate();
        plotsDrawingPanelAuxiliary2.repaint();
    }//GEN-LAST:event_heatplotButton1ActionPerformed

    private void plotsDrawingPanelAuxiliary2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plotsDrawingPanelAuxiliary2MouseClicked
        final OneToManyComparison bc = getContext();
        plotsDrawingPanelAuxiliary2.mouseClicked(evt);

        if (plotsDrawingPanelAuxiliary2.getSelectedModelIndex() > -1 && plotsDrawingPanelAuxiliary2.getSelectedModelIndex() < bc.getModels().size()) {
            pairComparisonPanel1.clear();
            jPanel4.setVisible(false);
            pairFrame.setVisible(true);
            pairFrame.setSize(800, 600);

            Runnable run = new Runnable() {
                @Override
                public void run() {

                    pairComparisonPanel1.getListener().removeModel();
                    List<File> models;
                    if (bc.getRegistrationMethod() == RegistrationMethod.NO_REGISTRATION) {
                        models = bc.getModels();
                    } else {
                        models = bc.getRegisteredModels();
                    }

                    Model primary = bc.getPrimaryModel();
                    pairComparisonPanel1.getListener().addModel(primary);
                    pairComparisonPanel1.getListener().addModel(ModelLoader.instance().loadModel(models.get(plotsDrawingPanelAuxiliary2.getSelectedModelIndex()), false, false));
                    List<Float> values = bc.getNumResults().get(plotsDrawingPanelAuxiliary2.getSelectedModelIndex());
                    HDpaintingInfo info = new HDpaintingInfo(values, primary, true);
                    HDpainting hdp = new HDpainting(info);
                    pairComparisonPanel1.getListener().setHdPaint(hdp);
                    pairComparisonPanel1.getListener().setHdInfo(info);
                    pairComparisonPanel1.setInfo(hdp);
                    pairComparisonPanel1.getListener().setPaintHD(true);
                    pairComparisonPanel1.revalidate();
                    pairComparisonPanel1.repaint();

                    pairFrame.setTitle(primary.getName() + " vs. " + bc.getModel(plotsDrawingPanelAuxiliary2.getSelectedModelIndex()).getName());
                    Image icon = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);

                    pairFrame.setIconImage(icon);
                }

            };

            Thread t = new Thread(run);
            t.start();

        }
    }//GEN-LAST:event_plotsDrawingPanelAuxiliary2MouseClicked

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        plotsDrawingPanelAuxiliary2.setScheme(ColorScheme.values()[jComboBox4.getSelectedIndex()]);
        plotsDrawingPanelAuxiliary2.resetValues();
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        plotsDrawingPanelAuxiliary2.setAbsolute(jComboBox5.getSelectedIndex() == 1);
        plotsDrawingPanelAuxiliary2.resetValues();
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void colorSchemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSchemeComboBoxActionPerformed
        OneToManyComparison bc = getContext();

        //Procrustes
        if (bc.getHDP() == null) {
            return;
        }
        bc.getHDP().getInfo().setColorScheme((ColorScheme) colorSchemeComboBox.getSelectedItem());
        bc.setUsedColorScheme((ColorScheme) colorSchemeComboBox.getSelectedItem());
    }//GEN-LAST:event_colorSchemeComboBoxActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        heatplotColorScheme = ColorScheme.values()[jComboBox7.getSelectedIndex()];
        setHeatPlotLabels();
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void alignParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignParametersButtonActionPerformed
        OneToManyComparison c = getContext();
        String[][] values = TableProcessing.instance().alignmentInfoTable(c.getIcpMetric(), c.getScaleEnabled(), c.getICPerrorRate(), c.getICPmaxIteration(),
                -1, null, Methods.values()[c.getMethod()], Type.values()[c.getType()], c.getValue());

        alignTable.setModel(new javax.swing.table.DefaultTableModel(
                values,
                values[0]
        ));

        TableProcessing.instance().setUpTable(alignTable, alignFrame, GUIController.getSelectedProjectTopComponent(), "Alignment parameters");
    }//GEN-LAST:event_alignParametersButtonActionPerformed

    private void crosscutColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crosscutColorPanelMouseClicked
        activeColorPanel = crosscutColorPanel;
        jColorChooser1.setColor(crosscutColorPanel.getBackground());
        colorDialog.setVisible(true);
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().getInfo().setColorOfCut(crosscutColorPanel.getBackground().getRGBColorComponents(new float[3]));
        getContext().setCrosscutColor(crosscutColorPanel.getBackground());
    }//GEN-LAST:event_crosscutColorPanelMouseClicked

    private void crosscutThicknessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_crosscutThicknessSliderStateChanged
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().getInfo().setCutThickness(crosscutThicknessSlider.getValue() / 10f);
        getContext().setCrosscutThickness(crosscutThicknessSlider.getValue());
    }//GEN-LAST:event_crosscutThicknessSliderStateChanged

    private void minThreshSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minThreshSliderStateChanged
        if (!minTresholdValueChanged) {
            minTresholdValueChanged = true;
            getContext().setHausdorfMinTreshold(minThreshSlider.getValue());
            minThreshSpinner.setValue(GUIController.getSelectedProjectTopComponent().getProject().getSelectedOneToManyComparison().getHausdorfMinTreshold());

            setMinThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_minThreshSliderStateChanged

    private void minThreshSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minThreshSpinnerStateChanged
        if (!minTresholdValueChanged) {
            minTresholdValueChanged = true;
            getContext().setHausdorfMinTreshold(Integer.valueOf(minThreshSpinner.getValue().toString()));
            minThreshSlider.setValue(getContext().getHausdorfMinTreshold());

            setMinThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_minThreshSpinnerStateChanged

    private void valuesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valuesComboBoxActionPerformed
        getContext().setValuesTypeIndex(valuesComboBox.getSelectedIndex());
    }//GEN-LAST:event_valuesComboBoxActionPerformed

    private void densityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_densityStateChanged
        getContext().setVectorDensity(density.getValue());
    }//GEN-LAST:event_densityStateChanged

    private void cylLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cylLengthStateChanged
        getContext().setVectorLength(cylLength.getValue());
    }//GEN-LAST:event_cylLengthStateChanged

    private void cylRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cylRadiusStateChanged
        getContext().setCylinderRadius(cylRadius.getValue());
    }//GEN-LAST:event_cylRadiusStateChanged

    private void lensSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lensSliderStateChanged
        plotsDrawingPanelAuxiliary2.setPeakStrength(lensSlider.getValue()/(float)10);
    }//GEN-LAST:event_lensSliderStateChanged

    private void boxplotCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxplotCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().getInfo().setShowBoxplot(boxplotCheckBox.isSelected());
        getContext().setShowBoxplot(boxplotCheckBox.isSelected());
    }//GEN-LAST:event_boxplotCheckBoxActionPerformed

    private void boxplotContinuousCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxplotContinuousCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener2().getInfo().setShowBoxplotFunction(boxplotContinuousCheckBox.isSelected());
        getContext().setShowBoxplotFunction(boxplotContinuousCheckBox.isSelected());
    }//GEN-LAST:event_boxplotContinuousCheckBoxActionPerformed

    private void showPlaneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPlaneCheckBoxActionPerformed
        GUIController.getSelectedProjectTopComponent().getOneToManyViewerPanel().getListener1().setShowPlane(showPlaneCheckBox.isSelected());
        getContext().setShowPlane(showPlaneCheckBox.isSelected());
    }//GEN-LAST:event_showPlaneCheckBoxActionPerformed

    public void enableArbitraryNormal() {
        getContext().setCrossCutPlaneIndex(4);
        arbitraryPlaneRadioButton.setEnabled(true);
        arbitraryPlaneRadioButton.setSelected(true);
        setNormalControlsEnabled(true);
        
    }
    
    public void setPlaneNormal(Vector3f normal) {
        xArbitrarySpinner.setValue(normal.x);
        yArbitrarySpinner.setValue(normal.y);
        zArbitrarySpinner.setValue(normal.z);   
        getContext().setArbitraryPlanePos((float)xArbitrarySpinner.getValue(), (float) yArbitrarySpinner.getValue(), (float) zArbitrarySpinner.getValue());
    }

    public void setPlanePoint(Vector3f p) {
        xPositionSpinner.setValue(p.x);
        yPositionSpinner.setValue(p.y);
        zPositionSpinner.setValue(p.z);
        getContext().setPlanePosition((float)xPositionSpinner.getValue(), (float) yPositionSpinner.getValue(), (float) zPositionSpinner.getValue());

    }

    public void setValuesModified(boolean valuesModified) {
        this.valuesModified = valuesModified;
    }

    private void setNormalControlsEnabled(boolean en) {
        xArbitrarySpinner.setEnabled(en);
        yArbitrarySpinner.setEnabled(en);
        zArbitrarySpinner.setEnabled(en);
        jLabel9.setEnabled(en);
        jLabel12.setEnabled(en);
        jLabel13.setEnabled(en);
    }

    public histogramPanel getHistogram() {
        return histogram1;
    }

    private void setMaxThreshValue() {
        float maxUsedValues;
        List<Float> list;

        if (getContext().getValuesTypeIndex() == 0) {
            list = getContext().getSortedHdRel();
        } else {
            list = getContext().getSortedHdAbs();

        }

        int size = list.size();
        int index = (int) (size * (getContext().getHausdorfMaxTreshold() / 100f));

        if (index == 0) {
            maxUsedValues = list.get(0);
        } else {
            maxUsedValues = list.get(index - 1);
        }

        getContext().getHdPaintingInfo().setMaxThreshValue(maxUsedValues);

        maxTresholdValueChanged = false;
    }

    private void setMinThreshValue() {

        List<Float> list;

        if (getContext().getValuesTypeIndex() == 0) {
            list = getContext().getSortedHdRel();
        } else {
            list = getContext().getSortedHdAbs();

        }

        int size = list.size();

        float minUsedValues;
        int index2 = (int) (size * (getContext().getHausdorfMinTreshold() / 100f));

        if (index2 == 0) {
            minUsedValues = list.get(0);
        } else {
            minUsedValues = list.get(index2 - 1);
        }

        getContext().getHdPaintingInfo().setMinThreshValue(minUsedValues);
        minTresholdValueChanged = false;
    }

    public void setConfiguration() {
        maxThresholdSpinner.setVisible(false);
        maxThresholdSlider.setVisible(false);
        jLabel7.setVisible(false);

        OneToManyComparison c = getContext();

        metricComboBox.setSelectedIndex(c.getMetricTypeIndex());
        VisualizationBox.setSelectedItem(c.getVisualization());
        valuesComboBox.setSelectedIndex(c.getValuesTypeIndex());

        //crosscutPlane
        switch (c.getCrossCutPlaneIndex()) {
            case 0:
                xyPlaneRadioButton.setSelected(true);
                break;
            case 1:
                yzPlaneRadioButton.setSelected(true);
                break;
            case 2:
                xzPlaneRadioButton.setSelected(true);
                break;
            case 3:
                arbitraryPlaneRadioButton.setSelected(true);
                break;
        }

        valuesModified = true;
        xArbitrarySpinner.setValue(c.getArbitraryPlanePos().x);
        yArbitrarySpinner.setValue(c.getArbitraryPlanePos().y);
        zArbitrarySpinner.setValue(c.getArbitraryPlanePos().z);

        xPositionSpinner.setValue(c.getPlanePosition().x);
        yPositionSpinner.setValue(c.getPlanePosition().y);
        zPositionSpinner.setValue(c.getPlanePosition().z);
        valuesModified = false;

        crosscutSizeSlider.setValue(c.getCrosscutSize());
        crosscutThicknessSlider.setValue(c.getCrosscutThickness());
        crosscutColorPanel.setBackground(c.getCrosscutColor());

        highlightCutsCheckBox.setSelected(c.isHighlightCuts());
        showVectorsCheckBox.setSelected(c.isShowVectors());
        allCutsCheckBox.setSelected(c.isAllCuts());
        samplingRaysCheckBox.setSelected(c.isSamplingRays());
        boxplotCheckBox.setSelected(c.isShowBoxplot());
        boxplotContinuousCheckBox.setSelected(c.isShowBoxplotFunction());
        showPlaneCheckBox.setSelected(c.isShowPlane());

        //vector visualization
        density.setValue(c.getVectorDensity());
        cylLength.setValue(c.getVectorLength());
        cylRadius.setValue(c.getCylinderRadius());

        //colormaps
        maxThresholdSlider.setValue(c.getHausdorfMaxTreshold());
        maxThresholdSpinner.setValue(c.getHausdorfMaxTreshold());
        minThreshSpinner.setValue(c.getHausdorfMinTreshold());
        minThreshSlider.setValue(c.getHausdorfMinTreshold());
        colorSchemeComboBox.setSelectedItem(c.getUsedColorScheme());

        //fp
        fpDistanceSlider.setValue(c.getFpDistance());
        fpSizeSlider.setValue(c.getFpSize());

        VisualizationBox.removeItem(VisualizationType.TRANSPARENCY);

        if (c.getComparisonMethod() == ComparisonMethod.PROCRUSTES) {
            showProcrustesControls();
        }
        if (c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_CURV
                || c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_DIST) {
            showHausdorfControls();
            if (c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_CURV) {
                jLabel5.setVisible(false);
                valuesComboBox.setVisible(false);
            }

        }

        if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {
            alignParametersButton.setVisible(true);
        } else {
            alignParametersButton.setVisible(false);
        }

        updateHistograms();

    }

    private OneToManyComparison getContext() {
        return GUIController.getSelectedProjectTopComponent().getProject().getSelectedOneToManyComparison();
    }

    public void updateHistograms() {
        //Procrustes
        HDpaintingInfo hdp = getContext().getHdPaintingInfo();
        
        if (getContext().getHDP() == null) {
            return;
        }
        
        if(hdp.getMinThreshValue() < hdp.getMinSelection()){
            hdp.setMinSelection(hdp.getMinThreshValue());
        }
        
         if(hdp.getMaxThreshValue() > hdp.getMaxSelection()){
            hdp.setMaxSelection(hdp.getMaxThreshValue());
        }

        List<Float> f = getContext().getHDP().getInfo().getDistance();

        histogram1.setHdp(getContext().getHdPaintingInfo());
        histogram1.setValues(f);
        histogram1.recomputeSliderPosition();
        histogram1.revalidate();
        histogram1.repaint();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox VisualizationBox;
    private javax.swing.JFrame alignFrame;
    private javax.swing.JButton alignParametersButton;
    private javax.swing.JTable alignTable;
    private javax.swing.JCheckBox allCutsCheckBox;
    private javax.swing.JRadioButton arbitraryPlaneRadioButton;
    private javax.swing.JCheckBox boxplotCheckBox;
    private javax.swing.JCheckBox boxplotContinuousCheckBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JPanel colorMapPanel;
    private javax.swing.JComboBox colorSchemeComboBox;
    private javax.swing.JButton comparisonButton;
    private javax.swing.JPanel crosscutColorPanel;
    private javax.swing.JSlider crosscutSizeSlider;
    private javax.swing.JSlider crosscutThicknessSlider;
    private javax.swing.JSlider cylLength;
    private javax.swing.JLabel cylLengthLabel;
    private javax.swing.JSlider cylRadius;
    private javax.swing.JLabel cylRadiusLabel;
    private javax.swing.JLabel densLabel;
    private javax.swing.JLabel densLabel1;
    private javax.swing.JLabel densLabel2;
    private javax.swing.JSlider density;
    private javax.swing.JButton exportOrderedResultsButton;
    private javax.swing.JSlider fpDistanceSlider;
    private javax.swing.JSlider fpSizeSlider;
    private javax.swing.JButton heatplotButton;
    private javax.swing.JButton heatplotButton1;
    private javax.swing.JCheckBox highlightCutsCheckBox;
    private cz.fidentis.visualisation.histogram.histogramPanel histogram1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JSlider lensSlider;
    private javax.swing.JSlider maxThresholdSlider;
    private javax.swing.JSpinner maxThresholdSpinner;
    private javax.swing.JComboBox metricComboBox;
    private javax.swing.JSlider minThreshSlider;
    private javax.swing.JSpinner minThreshSpinner;
    private cz.fidentis.gui.PairComparisonPanel pairComparisonPanel1;
    private javax.swing.JFrame pairFrame;
    private cz.fidentis.gui.PlotsDrawingPanelAuxiliary plotsDrawingPanelAuxiliary2;
    private javax.swing.JCheckBox samplingRaysCheckBox;
    private javax.swing.JToggleButton selectionButton;
    private javax.swing.JCheckBox showPlaneCheckBox;
    private javax.swing.JCheckBox showVectorsCheckBox;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JPanel slicesPanel;
    private javax.swing.JComboBox valuesComboBox;
    private javax.swing.JSpinner xArbitrarySpinner;
    private javax.swing.JSpinner xPositionSpinner;
    private javax.swing.JRadioButton xyPlaneRadioButton;
    private javax.swing.JRadioButton xzPlaneRadioButton;
    private javax.swing.JSpinner yArbitrarySpinner;
    private javax.swing.JSpinner yPositionSpinner;
    private javax.swing.JRadioButton yzPlaneRadioButton;
    private javax.swing.JSpinner zArbitrarySpinner;
    private javax.swing.JSpinner zPositionSpinner;
    // End of variables declaration//GEN-END:variables
}
