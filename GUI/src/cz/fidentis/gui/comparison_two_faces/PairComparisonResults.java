/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_two_faces;

import cz.fidentis.comparison.ComparisonMethod;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.comparison.hausdorffDistance.ComparisonMetrics;
import cz.fidentis.controller.Comparison2Faces;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.gui.TableProcessing;
import cz.fidentis.gui.guisetup.TwoFacesGUISetup;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.ResultExports;
import cz.fidentis.renderer.ComparisonGLEventListener;
import cz.fidentis.undersampling.Methods;
import cz.fidentis.undersampling.Type;
import cz.fidentis.visualisation.ColorScheme;
import cz.fidentis.visualisation.histogram.histogramPanel;
import cz.fidentis.visualisation.surfaceComparison.HDpainting;
import cz.fidentis.visualisation.surfaceComparison.HDpaintingInfo;
import cz.fidentis.visualisation.surfaceComparison.SelectionType;
import cz.fidentis.visualisation.surfaceComparison.VisualizationType;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.color.ColorSpace;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
public class PairComparisonResults extends javax.swing.JPanel {

    JPanel activeColorPanel;
    private boolean maxTresholdValueChanged;
    private boolean minTresholdValueChanged;
    private boolean transpTresholdValueChanged;

    /**
     * Creates new form PairComparisonResults
     */
    public PairComparisonResults() {
        initComponents();
    }

    public void showProcrustesControls() {
        jPanel1.setVisible(false);
        jPanel2.setVisible(true);
        jButton10.setVisible(false);
        jLabel4.setVisible(false);
        valuesComboBox.setVisible(false);
        maxThresholdSpinner.setVisible(false);
        maxThresholdSlider.setVisible(false);
        jLabel5.setVisible(false);
        jButton8.setVisible(false);

    }

    public void showHausdorfControls() {
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
        jButton10.setVisible(true);
        jLabel4.setVisible(true);
        valuesComboBox.setVisible(true);
        maxThresholdSpinner.setVisible(true);
        maxThresholdSlider.setVisible(true);
        jLabel5.setVisible(true);
        jButton8.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        alignFrame = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        alignTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        exportNumResButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        comparisonButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        VisualizationBox = new javax.swing.JComboBox();
        densLabel = new javax.swing.JLabel();
        density = new javax.swing.JSlider();
        shadersPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        secondaryColorPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        primaryColorPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        transparencySlider = new javax.swing.JSlider();
        innerSurfaceSolidCheckbox = new javax.swing.JCheckBox();
        noneRadioButton = new javax.swing.JRadioButton();
        colorOverlayRadioButton = new javax.swing.JRadioButton();
        transparencyRadioButton = new javax.swing.JRadioButton();
        innerSurfaceRadioButton = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        useGlyphsCheckbox = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        fogColorPanel = new javax.swing.JPanel();
        useContoursCheckbox = new javax.swing.JCheckBox();
        secondarySolidCheckbox = new javax.swing.JCheckBox();
        primarySolidCheckbox = new javax.swing.JCheckBox();
        transpSpinner = new javax.swing.JSpinner();
        colormapPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        maxThresholdSpinner = new javax.swing.JSpinner();
        valuesComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        maxThresholdSlider = new javax.swing.JSlider();
        histogram1 = new cz.fidentis.visualisation.histogram.histogramPanel();
        selectionButton = new javax.swing.JToggleButton();
        jButton6 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        colorSchemeComboBox = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        minThreshSlider = new javax.swing.JSlider();
        minThreshSpinner = new javax.swing.JSpinner();
        cylRadius = new javax.swing.JSlider();
        cylLength = new javax.swing.JSlider();
        cylLengthLabel = new javax.swing.JLabel();
        cylRadiusLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        fpDistanceSlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        fpSizeSlider = new javax.swing.JSlider();
        jButton7 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        alignParamButton = new javax.swing.JButton();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        colorDialog.getAccessibleContext().setAccessibleParent(this);

        jDialog1.setModal(true);
        jDialog1.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        jDialog1.setName("Numerical results "); // NOI18N
        jDialog1.getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable3.setColumnSelectionAllowed(true);
        jTable3.getTableHeader().setResizingAllowed(false);
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable3);

        jDialog1.getContentPane().add(jScrollPane1);

        jFrame1.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable1);

        jFrame1.getContentPane().add(jScrollPane3);

        alignFrame.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        alignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        alignTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        alignTable.setColumnSelectionAllowed(true);
        alignTable.getTableHeader().setResizingAllowed(false);
        alignTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(alignTable);

        alignFrame.getContentPane().add(jScrollPane4);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportNumResButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.exportNumResButton.text")); // NOI18N
        exportNumResButton.setToolTipText(org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.exportNumResButton.toolTipText")); // NOI18N
        exportNumResButton.setActionCommand(org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.exportNumResButton.actionCommand")); // NOI18N
        exportNumResButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportNumResButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(comparisonButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.comparisonButton.text")); // NOI18N
        comparisonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comparisonButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel3.text")); // NOI18N

        VisualizationBox.setModel(new DefaultComboBoxModel<>(VisualizationType.values()));
        VisualizationBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualizationBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(densLabel, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.densLabel.text")); // NOI18N

        density.setMajorTickSpacing(10);
        density.setMinorTickSpacing(5);
        density.setPaintLabels(true);
        density.setPaintTicks(true);
        density.setValue(10);
        density.setVisible(false);
        densLabel.setVisible(false);
        density.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                densityStateChanged(evt);
            }
        });

        shadersPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel8.text")); // NOI18N

        secondaryColorPanel.setBackground(new java.awt.Color(51, 153, 255));
        secondaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        secondaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout secondaryColorPanelLayout = new javax.swing.GroupLayout(secondaryColorPanel);
        secondaryColorPanel.setLayout(secondaryColorPanelLayout);
        secondaryColorPanelLayout.setHorizontalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        secondaryColorPanelLayout.setVerticalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel12.text")); // NOI18N

        primaryColorPanel.setBackground(new java.awt.Color(255, 255, 0));
        primaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        primaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                primaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout primaryColorPanelLayout = new javax.swing.GroupLayout(primaryColorPanel);
        primaryColorPanel.setLayout(primaryColorPanelLayout);
        primaryColorPanelLayout.setHorizontalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        primaryColorPanelLayout.setVerticalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel13.text")); // NOI18N

        transparencySlider.setMajorTickSpacing(20);
        transparencySlider.setMinorTickSpacing(5);
        transparencySlider.setPaintLabels(true);
        transparencySlider.setPaintTicks(true);
        transparencySlider.setValue(100);
        transparencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencySliderStateChanged(evt);
            }
        });

        innerSurfaceSolidCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(innerSurfaceSolidCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.innerSurfaceSolidCheckbox.text")); // NOI18N
        innerSurfaceSolidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innerSurfaceSolidCheckboxActionPerformed(evt);
            }
        });

        buttonGroup1.add(noneRadioButton);
        noneRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(noneRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.noneRadioButton.text")); // NOI18N
        noneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(colorOverlayRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(colorOverlayRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.colorOverlayRadioButton.text")); // NOI18N
        colorOverlayRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorOverlayRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(transparencyRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(transparencyRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.transparencyRadioButton.text")); // NOI18N
        transparencyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(innerSurfaceRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(innerSurfaceRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.innerSurfaceRadioButton.text")); // NOI18N
        innerSurfaceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innerSurfaceRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel14.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useGlyphsCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.useGlyphsCheckbox.text")); // NOI18N
        useGlyphsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useGlyphsCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel15.text")); // NOI18N

        fogColorPanel.setBackground(new java.awt.Color(255, 102, 204));
        fogColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fogColorPanel.setPreferredSize(new java.awt.Dimension(2, 14));
        fogColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fogColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fogColorPanelLayout = new javax.swing.GroupLayout(fogColorPanel);
        fogColorPanel.setLayout(fogColorPanelLayout);
        fogColorPanelLayout.setHorizontalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );
        fogColorPanelLayout.setVerticalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        useContoursCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useContoursCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.useContoursCheckbox.text")); // NOI18N
        useContoursCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useContoursCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(secondarySolidCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.secondarySolidCheckbox.text")); // NOI18N
        secondarySolidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondarySolidCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(primarySolidCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.primarySolidCheckbox.text")); // NOI18N
        primarySolidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primarySolidCheckboxActionPerformed(evt);
            }
        });

        transpSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        transpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transpSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout shadersPanelLayout = new javax.swing.GroupLayout(shadersPanel);
        shadersPanel.setLayout(shadersPanelLayout);
        shadersPanelLayout.setHorizontalGroup(
            shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shadersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(26, 26, 26)
                        .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(transpSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useContoursCheckbox)
                            .addComponent(useGlyphsCheckbox)
                            .addComponent(innerSurfaceSolidCheckbox)
                            .addGroup(shadersPanelLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(innerSurfaceRadioButton)
                                    .addComponent(transparencyRadioButton)
                                    .addComponent(colorOverlayRadioButton)
                                    .addComponent(noneRadioButton)))
                            .addGroup(shadersPanelLayout.createSequentialGroup()
                                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(secondaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fogColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(primaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(secondarySolidCheckbox)
                                    .addComponent(primarySolidCheckbox))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        shadersPanelLayout.setVerticalGroup(
            shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shadersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addComponent(primarySolidCheckbox))
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(primaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(secondarySolidCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(fogColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(innerSurfaceSolidCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(useGlyphsCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useContoursCheckbox)
                .addGap(7, 7, 7)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noneRadioButton)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(colorOverlayRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transparencyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(innerSurfaceRadioButton)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel4.text")); // NOI18N

        maxThresholdSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        maxThresholdSpinner.setValue(98);
        maxThresholdSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxThresholdSpinnerStateChanged(evt);
            }
        });

        valuesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Relative", "Absolute" }));
        valuesComboBox.setMinimumSize(new java.awt.Dimension(67, 25));
        valuesComboBox.setPreferredSize(new java.awt.Dimension(67, 25));
        valuesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valuesComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel5.text")); // NOI18N

        maxThresholdSlider.setMajorTickSpacing(20);
        maxThresholdSlider.setMinorTickSpacing(5);
        maxThresholdSlider.setPaintLabels(true);
        maxThresholdSlider.setPaintTicks(true);
        maxThresholdSlider.setValue(75);
        maxThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxThresholdSliderStateChanged(evt);
            }
        });

        histogram1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                histogram1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout histogram1Layout = new javax.swing.GroupLayout(histogram1);
        histogram1.setLayout(histogram1Layout);
        histogram1Layout.setHorizontalGroup(
            histogram1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        histogram1Layout.setVerticalGroup(
            histogram1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 218, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(selectionButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.selectionButton.text")); // NOI18N
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rectangle", "Ellipse" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        colorSchemeComboBox.setModel(new DefaultComboBoxModel<>(ColorScheme.values()));
        colorSchemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSchemeComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel21, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel21.text")); // NOI18N

        minThreshSlider.setMajorTickSpacing(20);
        minThreshSlider.setMinorTickSpacing(5);
        minThreshSlider.setPaintLabels(true);
        minThreshSlider.setPaintTicks(true);
        minThreshSlider.setValue(0);
        minThreshSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minThreshSliderStateChanged(evt);
            }
        });

        minThreshSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        minThreshSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minThreshSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout colormapPanelLayout = new javax.swing.GroupLayout(colormapPanel);
        colormapPanel.setLayout(colormapPanelLayout);
        colormapPanelLayout.setHorizontalGroup(
            colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(histogram1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colormapPanelLayout.createSequentialGroup()
                        .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(33, 33, 33)
                        .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valuesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colormapPanelLayout.createSequentialGroup()
                                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(minThreshSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(colormapPanelLayout.createSequentialGroup()
                                        .addComponent(maxThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(minThreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxThresholdSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(colorSchemeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(colormapPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(selectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        colormapPanelLayout.setVerticalGroup(
            colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(valuesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(maxThresholdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minThreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minThreshSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(colorSchemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(histogram1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1)
                    .addComponent(selectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        cylRadius.setMajorTickSpacing(1);
        cylRadius.setMaximum(10);
        cylRadius.setMinimum(1);
        cylRadius.setPaintLabels(true);
        cylRadius.setPaintTicks(true);
        cylRadius.setValue(1);
        cylRadius.setVisible(false);
        cylRadiusLabel.setVisible(false);
        cylRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cylRadiusStateChanged(evt);
            }
        });

        cylLength.setMajorTickSpacing(1);
        cylLength.setMaximum(10);
        cylLength.setMinimum(1);
        cylLength.setPaintLabels(true);
        cylLength.setPaintTicks(true);
        cylLength.setSnapToTicks(true);
        cylLength.setValue(1);
        cylLength.setVisible(false);  cylLengthLabel.setVisible(false);
        cylLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cylLengthStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cylLengthLabel, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.cylLengthLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cylRadiusLabel, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.cylRadiusLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comparisonButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(shadersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(colormapPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cylLengthLabel)
                .addGap(18, 18, 18)
                .addComponent(cylLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(densLabel)
                    .addComponent(cylRadiusLabel))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(density, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cylRadius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 21, Short.MAX_VALUE)
                        .addComponent(VisualizationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(VisualizationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colormapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(density, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(densLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cylLengthLabel)
                    .addComponent(cylLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cylRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cylRadiusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shadersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comparisonButton)
                .addGap(14, 14, 14))
        );

        fpDistanceSlider.setMajorTickSpacing(20);
        fpDistanceSlider.setMinorTickSpacing(5);
        fpDistanceSlider.setPaintLabels(true);
        fpDistanceSlider.setPaintTicks(true);
        fpDistanceSlider.setValue(0);
        fpDistanceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpDistanceSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sizeLabel, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.sizeLabel.text")); // NOI18N

        fpSizeSlider.setMajorTickSpacing(20);
        fpSizeSlider.setMaximum(50);
        fpSizeSlider.setMinimum(10);
        fpSizeSlider.setMinorTickSpacing(5);
        fpSizeSlider.setPaintLabels(true);
        fpSizeSlider.setPaintTicks(true);
        fpSizeSlider.setValue(30);
        fpSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpSizeSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fpDistanceSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fpSizeSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(sizeLabel))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpDistanceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButton7, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton7.text")); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton10, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton10.text")); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton8, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.jButton8.text")); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(alignParamButton, org.openide.util.NbBundle.getMessage(PairComparisonResults.class, "PairComparisonResults.alignParamButton.text")); // NOI18N
        alignParamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignParamButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportNumResButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(alignParamButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportNumResButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addGap(7, 7, 7)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alignParamButton)
                .addGap(16, 16, 16)
                .addComponent(jButton7)
                .addGap(2, 2, 2))
        );

        jScrollPane2.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1617, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (getContext().getNumericalResults() != null) {
            String[][] values = TableProcessing.instance().parseTableAddHeader(getContext().getNumericalResults(), new String[]{
                "Lower: " + getContext().getLowerHDTreshold() * 100 + "% Upper: "
                + getContext().getUpperHDTreshold() * 100 + "% treshold",
                getContext().getModel2().getName()});

            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    values,
                    values[0]
            ));
        }

        TableProcessing.instance().setUpTable(jTable1, jFrame1, GUIController.getSelectedProjectTopComponent(), "Numerical results");

    }//GEN-LAST:event_jButton1ActionPerformed

    private void setMaxThreshValue() {
        float maxUsedValues;
        List<Float> list;

        if (getContext().getValuesTypeIndex() == 0) {
            list = getContext().getSortedHdValuesRelative();
        } else {
            list = getContext().getSortedHdValuesAbs();
        }

        int size = list.size();
        int index = (int) (size * (getContext().getHausdorfMaxTreshold() / 100f));

        if (index == 0) {
            maxUsedValues = list.get(0);
        } else {
            maxUsedValues = list.get(index - 1);
        }

        getContext().getHdPaintingInfo().setMaxThreshValue(maxUsedValues);

        maxTresholdValueChanged = false;
        minTresholdValueChanged = false;

    }

    private void setMinThreshValue() {

        List<Float> list;

        if (getContext().getValuesTypeIndex() == 0) {
            list = getContext().getSortedHdValuesRelative();
        } else {
            list = getContext().getSortedHdValuesAbs();
        }

        int size = list.size();

        float minUsedValues;
        int index2 = (int) (size * (getContext().getHausdorfMinTreshold() / 100f));

        if (index2 == 0) {
            minUsedValues = list.get(0);
        } else {
            minUsedValues = list.get(index2 - 1);
        }

        getContext().getHdPaintingInfo().setMinThreshValue(minUsedValues);
        minTresholdValueChanged = false;
        maxTresholdValueChanged = false;

    }


    private void fpSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpSizeSliderStateChanged
        Comparison2Faces c = getContext();

        if (c.getComparisonMethod() == ComparisonMethod.PROCRUSTES) {
            if (getContext().isFpScaling()) {
                //GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().getPaInfo().setPointSize(sizeSlider.getValue() / (float) (30));
                //GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setFpSize(sizeSlider.getValue() / (float) (30));
                GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getPaInfo().setPointSize(fpSizeSlider.getValue() * 3);
            } else {
                GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getPaInfo().setPointSize(fpSizeSlider.getValue() * 3);
                //GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setFpSize(sizeSlider.getValue() * 3);
            }
        }
        getContext().setFpSize(fpSizeSlider.getValue());
    }//GEN-LAST:event_fpSizeSliderStateChanged

    private void fpDistanceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpDistanceSliderStateChanged

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getPaInfo().setEnhance(fpDistanceSlider.getValue());
        repaint();
        getContext().setFpDistance(fpDistanceSlider.getValue());
    }//GEN-LAST:event_fpDistanceSliderStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        activeColorPanel.setBackground(jColorChooser1.getColor());

        //???
        HDpaintingInfo hdp;

        try {
            hdp = getContext().getHdPaintingInfo();

        } catch (NullPointerException ex) {
            hdp = null;
        }

        histogram1.repaint();
        setColors();

    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * This method is help method for saving numerical result as table
     *
     * @param file results should be saved into this file
     */
    private void exportNumResButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportNumResButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().exportCSVnumeric(tc, getContext().getNumericalResults());

    }//GEN-LAST:event_exportNumResButtonActionPerformed

    /**
     * This method saves current visualisation shown in the panel after pushing
     * saving button into a png file
     *
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();

        ResultExports.instance().exportVisualResults(tc, tc.getViewerPanel_2Faces().getListener1(),
                1920, 1920);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        getContext().setState(2);
        TwoFacesGUISetup.setUpDefaultComparisonConfigurationData(getContext());
        GUIController.getConfigurationTopComponent().addComparisonComponent();

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().drawHD(false);
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setProcrustes(false);
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setModel1(getContext().getModel1());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setModel2(getContext().getModel2());

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().addModel(getContext().getModel2());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().rotationAndSizeRestart();

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setResultButtonVisible(true, 0);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void maxThresholdSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxThresholdSpinnerStateChanged
        if (!maxTresholdValueChanged
                && getContext().getComparisonMethod() != ComparisonMethod.PROCRUSTES) {
            maxTresholdValueChanged = true;
            getContext().setHausdorfMaxTreshold(Integer.valueOf(maxThresholdSpinner.getValue().toString()));
            maxThresholdSlider.setValue(getContext().getHausdorfMaxTreshold());

            setMaxThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_maxThresholdSpinnerStateChanged

    private void comparisonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comparisonButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        final Comparison2Faces c = getContext();
        Runnable run = new Runnable() {

            @Override
            public void run() {
                ProgressHandle p;

                List<Float> hdDistance = c.getHd();
                List<Float> thresholdedValues;
                p = ProgressHandleFactory.createHandle("Recomputing comparison...");

                try {

                    p.start();

                    if (c.getValuesTypeIndex() == 1) {         //absolute is set
                        List<Float> absolute = new ArrayList<Float>();
                        for (Float hdDistance1 : hdDistance) {
                            absolute.add(Math.abs(hdDistance1));
                        }

                        hdDistance = absolute;
                    }

                    HDpaintingInfo info = c.getHdPaintingInfo();

                    // Setting visualization type
                    if (c.getVisualization() == VisualizationType.COLORMAP) {
                        info.setvType(VisualizationType.COLORMAP);
                    }
                    if (c.getVisualization() == VisualizationType.VECTORS) {
                        info.setvType(VisualizationType.VECTORS);
                    }

                    //Setting density param 
                    info.setDensity(density.getValue());
                    info.setCylLengthFactor(cylLength.getValue());
                    info.setCylRadius(cylRadius.getValue());
                    info.setIndicesForNormals(info.getGraph().indicesFordDensityNormals(density.getValue()));
                    info.setRecompute(true);

                    thresholdedValues = ComparisonMetrics.instance().thresholdValues(hdDistance, c.getHausdorfMaxTreshold() / 100f, c.getHausdorfMinTreshold() / 100f, c.getValuesTypeIndex() == 0);

                    String res = SurfaceComparisonProcessing.instance().getNumericResults(thresholdedValues, c.getValuesTypeIndex() == 0);

                    info.setDistance(hdDistance);
                    info.setUseRelative(c.getValuesTypeIndex() == 0);
                    c.setNumericalResults(res);
                    p.finish();

                    /*if (GUIController.getSelectedProjectTopComponent() == tc) {
                        GUIController.getConfigurationTopComponent().addPairComparisonResults();
                    }*/
                    updateHistograms();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                } finally {
                    p.finish();
                }
            }
        };

        Thread t = new Thread(run);
        t.start();
    }//GEN-LAST:event_comparisonButtonActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().exportModels(tc,
                tc.getProject().getSelectedComparison2Faces().getModel1(),
                tc.getProject().getSelectedComparison2Faces().getModel2());
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().writeAuxResults(tc, tc.getProject().getSelectedComparison2Faces().getHd(),
                tc.getProject().getSelectedComparison2Faces().getModel1().getName(), valuesComboBox.getSelectedIndex() == 0);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void VisualizationBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualizationBoxActionPerformed
        /**
         * Visibility of density slider and label
         */

        Comparison2Faces c = getContext();

        //Procrustes
        if (c.getHdPaintingInfo() == null) {
            return;
        }

        c.setVisualization((VisualizationType) VisualizationBox.getSelectedItem());

        //Colormap
        if (c.getVisualization() == VisualizationType.COLORMAP) {
            densLabel.setVisible(false);
            density.setVisible(false);
            cylLength.setVisible(false);
            cylLengthLabel.setVisible(false);
            cylRadius.setVisible(false);
            cylRadiusLabel.setVisible(false);
            colormapPanel.setVisible(true);
            shadersPanel.setVisible(false);
            c.getHdPaintingInfo().setvType(VisualizationType.COLORMAP);
            updateHistograms();

        }

        //transparency
        if (c.getVisualization() == VisualizationType.TRANSPARENCY) {
            densLabel.setVisible(false);
            density.setVisible(false);
            cylLength.setVisible(false);
            cylLengthLabel.setVisible(false);
            cylRadius.setVisible(false);
            cylRadiusLabel.setVisible(false);
            colormapPanel.setVisible(false);
            shadersPanel.setVisible(true);
            c.getHdPaintingInfo().setvType(VisualizationType.TRANSPARENCY);

        }

        //vectors
        if (c.getVisualization() == VisualizationType.VECTORS) {
            densLabel.setVisible(true);
            density.setVisible(true);
            cylLength.setVisible(true);
            cylLengthLabel.setVisible(true);
            cylRadius.setVisible(true);
            cylRadiusLabel.setVisible(true);
            colormapPanel.setVisible(true);
            shadersPanel.setVisible(false);
            c.getHdPaintingInfo().setvType(VisualizationType.VECTORS);
            updateHistograms();

            //Setting density param 
            HDpaintingInfo info = c.getHdPaintingInfo();

            info.setvType(VisualizationType.VECTORS);
            info.setDensity(c.getVectorDensity());
            info.setCylLengthFactor(c.getVectorLength());
            info.setCylRadius(c.getCylinderRadius());
            info.setIndicesForNormals(info.getGraph().indicesFordDensityNormals(c.getVectorDensity()));
            info.setRecompute(true);
        }

        GUIController.getSelectedProjectTopComponent().revalidate();
        GUIController.getSelectedProjectTopComponent().repaint();
    }//GEN-LAST:event_VisualizationBoxActionPerformed

    private void valuesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valuesComboBoxActionPerformed
        getContext().setValuesTypeIndex(valuesComboBox.getSelectedIndex());
    }//GEN-LAST:event_valuesComboBoxActionPerformed

    private void secondaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondaryColorPanelMouseClicked
        activeColorPanel = secondaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_secondaryColorPanelMouseClicked

    private void primaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_primaryColorPanelMouseClicked
        activeColorPanel = primaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_primaryColorPanelMouseClicked

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        if (!transpTresholdValueChanged) {
            transpTresholdValueChanged = true;
            getContext().setOverlayTransparency(transparencySlider.getValue());        
            transpSpinner.setValue((int)getContext().getOverlayTransparency());
            setColors();
            transpTresholdValueChanged = false;
        }
    }//GEN-LAST:event_transparencySliderStateChanged

    public void setColors() {
        ComparisonGLEventListener tc = GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1();
        Comparison2Faces c = getContext();

        float[] color = new float[4];
        primaryColorPanel.getBackground().getRGBColorComponents(color);
        color[3] = c.isIsPrimarySolid() ? 1 : c.getOverlayTransparency() / (float) 100;
        tc.setPrimaryColor(color);
        c.setPrimaryColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color, 1));

        float[] color2 = new float[4];
        secondaryColorPanel.getBackground().getRGBColorComponents(color2);
        color2[3] = c.isIsSecondarySolid() ? 1 : c.getOverlayTransparency() / (float) 100;
        tc.setSecondaryColor(color2);
        c.setSecondaryColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color2, 1));

        float[] color3 = new float[4];
        fogColorPanel.getBackground().getRGBColorComponents(color3);
        tc.setFogColor(color3);
        c.setFogColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color3, 1));
    }

    private void innerSurfaceSolidCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerSurfaceSolidCheckboxActionPerformed
        getContext().setInnerSurfaceSolid(innerSurfaceSolidCheckbox.isSelected());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setInnerSurfaceVisible(innerSurfaceSolidCheckbox.isSelected());
    }//GEN-LAST:event_innerSurfaceSolidCheckboxActionPerformed

    private void noneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneRadioButtonActionPerformed
        if (noneRadioButton.isSelected()) {
            getContext().setFogVersion(0);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(0);
        }
    }//GEN-LAST:event_noneRadioButtonActionPerformed

    private void colorOverlayRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorOverlayRadioButtonActionPerformed
        if (colorOverlayRadioButton.isSelected()) {
            getContext().setFogVersion(1);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(1);
        }
    }//GEN-LAST:event_colorOverlayRadioButtonActionPerformed

    private void transparencyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyRadioButtonActionPerformed
        if (transparencyRadioButton.isSelected()) {
            getContext().setFogVersion(2);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(2);
        }
    }//GEN-LAST:event_transparencyRadioButtonActionPerformed

    private void innerSurfaceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerSurfaceRadioButtonActionPerformed
        if (innerSurfaceRadioButton.isSelected()) {
            getContext().setFogVersion(3);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(3);
        }
    }//GEN-LAST:event_innerSurfaceRadioButtonActionPerformed

    private void useGlyphsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGlyphsCheckboxActionPerformed
        getContext().setUseGlyphs(useGlyphsCheckbox.isSelected());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setUseGlyphs(useGlyphsCheckbox.isSelected());
    }//GEN-LAST:event_useGlyphsCheckboxActionPerformed

    private void fogColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fogColorPanelMouseClicked
        activeColorPanel = fogColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_fogColorPanelMouseClicked

    private void useContoursCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useContoursCheckboxActionPerformed
        getContext().setUseContours(useContoursCheckbox.isSelected());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setContours(useContoursCheckbox.isSelected());
    }//GEN-LAST:event_useContoursCheckboxActionPerformed

    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
        if (jComboBox1.getSelectedItem().equals(SelectionType.RECTANGLE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.RECTANGLE);
        }
        if (jComboBox1.getSelectedItem().equals(SelectionType.ELLIPSE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.ELLIPSE);
        }
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setSelection(selectionButton.isSelected());
    }//GEN-LAST:event_selectionButtonActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().clearSelection();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void secondarySolidCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondarySolidCheckboxActionPerformed
        getContext().setIsSecondarySolid(secondarySolidCheckbox.isSelected());
        setColors();
    }//GEN-LAST:event_secondarySolidCheckboxActionPerformed

    private void primarySolidCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primarySolidCheckboxActionPerformed
        getContext().setIsPrimarySolid(primarySolidCheckbox.isSelected());
        setColors();
    }//GEN-LAST:event_primarySolidCheckboxActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem().equals(SelectionType.RECTANGLE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.RECTANGLE);
        }
        if (jComboBox1.getSelectedItem().equals(SelectionType.ELLIPSE.toString())) {
            getContext().getHdPaintingInfo().setsType(SelectionType.ELLIPSE);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void adjustThresholds(){
        List<Float> l = getContext().getValuesTypeIndex() == 0 ? getContext().getSortedHdValuesRelative() : getContext().getSortedHdValuesAbs();
        int count = 0;
        int count2 = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) <= getContext().getHdPaintingInfo().getMaxThreshValue()) {
                count++;
            }
            if (l.get(i) >= getContext().getHdPaintingInfo().getMinThreshValue()) {
                count2++;
            }
        }
        minTresholdValueChanged = true;
        maxTresholdValueChanged = true;
        float percent = count / (float) l.size();
        maxThresholdSlider.setValue((int) (percent * 100));
        maxThresholdSpinner.setValue((int) (percent * 100));
        float percent2 = count2 / (float) l.size();
        minThreshSlider.setValue(100 - (int) (percent2 * 100));
        minThreshSpinner.setValue(100 - (int) (percent2 * 100));
        minTresholdValueChanged = false;
        maxTresholdValueChanged = false;      
    }
    
    private void histogram1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_histogram1MouseDragged
        List<Float> l = getContext().getValuesTypeIndex() == 0 ? getContext().getSortedHdValuesRelative() : getContext().getSortedHdValuesAbs();
        int count = 0;
        int count2 = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) <= getContext().getHdPaintingInfo().getMaxThreshValue()) {
                count++;
            }
            if (l.get(i) >= getContext().getHdPaintingInfo().getMinThreshValue()) {
                count2++;
            }

        }
        if (histogram1.isMaxSliderSelected()) {
            float percent = count / (float) l.size();
            maxThresholdSlider.setValue((int) (percent * 100));
            getContext().setHausdorfMaxTreshold((int) (percent * 100));
        }
        if (histogram1.isMinSliderSelected()) {
            float percent2 = count2 / (float) l.size();
            minThreshSlider.setValue(100 - (int) (percent2 * 100));
            getContext().setHausdorfMinTreshold(100 - (int) (percent2 * 100));
        }
    }//GEN-LAST:event_histogram1MouseDragged

    private void colorSchemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSchemeComboBoxActionPerformed
        Comparison2Faces bc = getContext();

        //Procrustes
        if (bc.getHDP() == null) {
            return;
        }

        bc.setColorScheme(((ColorScheme) colorSchemeComboBox.getSelectedItem()));
        bc.getHDP().getInfo().setColorScheme((ColorScheme) colorSchemeComboBox.getSelectedItem());
    }//GEN-LAST:event_colorSchemeComboBoxActionPerformed

    private void maxThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxThresholdSliderStateChanged
        if (!maxTresholdValueChanged
                && getContext().getComparisonMethod() != ComparisonMethod.PROCRUSTES) {
            maxTresholdValueChanged = true;
            getContext().setHausdorfMaxTreshold(maxThresholdSlider.getValue());
            maxThresholdSpinner.setValue(getContext().getHausdorfMaxTreshold());

            setMaxThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_maxThresholdSliderStateChanged

    private void alignParamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignParamButtonActionPerformed
        Comparison2Faces c = getContext();
        String[][] values = TableProcessing.instance().alignmentInfoTable(c.getIcpMetric(), c.getScaleEnabled(), c.getICPerrorRate(), c.getICPmaxIteration(),
                -1, null, Methods.values()[c.getMethod()], Type.values()[c.getType()], c.getValue());

        alignTable.setModel(new javax.swing.table.DefaultTableModel(
                values,
                values[0]
        ));

        TableProcessing.instance().setUpTable(alignTable, alignFrame, GUIController.getSelectedProjectTopComponent(), "Alignment parameters");
    }//GEN-LAST:event_alignParamButtonActionPerformed

    private void minThreshSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minThreshSliderStateChanged
        if (!minTresholdValueChanged) {
            minTresholdValueChanged = true;
            getContext().setHausdorfMinTreshold(minThreshSlider.getValue());
            minThreshSpinner.setValue(getContext().getHausdorfMinTreshold());

            setMinThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_minThreshSliderStateChanged

    private void minThreshSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minThreshSpinnerStateChanged
        if (!minTresholdValueChanged) {
            minTresholdValueChanged = true;
            getContext().setHausdorfMinTreshold(Integer.valueOf(minThreshSpinner.getValue().toString()));
            minThreshSlider.setValue(getContext().getHausdorfMinTreshold());

            setMinThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_minThreshSpinnerStateChanged

    private static Comparison2Faces getContext() {
        return GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces();
    }

    private void densityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_densityStateChanged
        getContext().setVectorDensity(density.getValue());
    }//GEN-LAST:event_densityStateChanged

    private void cylLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cylLengthStateChanged
        getContext().setVectorLength(cylLength.getValue());
    }//GEN-LAST:event_cylLengthStateChanged

    private void cylRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cylRadiusStateChanged
        getContext().setCylinderRadius(cylRadius.getValue());
    }//GEN-LAST:event_cylRadiusStateChanged

    private void transpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transpSpinnerStateChanged
        if (!transpTresholdValueChanged) {
            transpTresholdValueChanged = true;
            getContext().setOverlayTransparency((int)transpSpinner.getValue());        
            transparencySlider.setValue((int)getContext().getOverlayTransparency());
            setColors();
            transpTresholdValueChanged = false;
        }
    }//GEN-LAST:event_transpSpinnerStateChanged
    
    public void setConfiguration() {
        maxThresholdSpinner.setVisible(false);
        maxThresholdSlider.setVisible(false);
        jLabel5.setVisible(false);
        Comparison2Faces c = getContext();
        
       VisualizationBox.setSelectedItem(c.getVisualization());
       valuesComboBox.setSelectedIndex(c.getValuesTypeIndex());
       
       maxThresholdSlider.setValue(c.getHausdorfMaxTreshold());
       maxThresholdSpinner.setValue(c.getHausdorfMaxTreshold());
       minThreshSlider.setValue(c.getHausdorfMinTreshold());
       minThreshSpinner.setValue(c.getHausdorfMinTreshold());
       
       colorSchemeComboBox.setSelectedItem(c.getColorScheme());
       density.setValue(c.getVectorDensity());
       cylLength.setValue(c.getVectorLength());
       cylRadius.setValue(c.getCylinderRadius());
       
       fpDistanceSlider.setValue(c.getFpDistance());
       fpSizeSlider.setValue(c.getFpSize());
       
       //overlay
        primaryColorPanel.setBackground(c.getPrimaryColor());
        primarySolidCheckbox.setSelected(c.isIsPrimarySolid());
        secondaryColorPanel.setBackground(c.getSecondaryColor());
        secondarySolidCheckbox.setSelected(c.isIsSecondarySolid());
        fogColorPanel.setBackground(c.getFogColor());
        transparencySlider.setValue((int) c.getOverlayTransparency());
        transpSpinner.setValue((int) c.getOverlayTransparency());
        innerSurfaceSolidCheckbox.setSelected(c.isInnerSurfaceSolid());
        useGlyphsCheckbox.setSelected(c.isUseGlyphs());
        useContoursCheckbox.setSelected(c.isUseContours());

        switch (c.getFogVersion()) {
            case 0:
                noneRadioButton.setSelected(true);
                break;
            case 1:
                colorOverlayRadioButton.setSelected(true);
                break;
            case 2:
                transparencyRadioButton.setSelected(true);
                break;
            case 3:
                innerSurfaceRadioButton.setSelected(true);
                break;
            default:
                noneRadioButton.setSelected(true);
        }

        VisualizationBox.removeItem(VisualizationType.CROSSSECTION);

        if (c.getComparisonMethod() == ComparisonMethod.PROCRUSTES) {
            showProcrustesControls();
        } else {
            showHausdorfControls();

            if (c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_CURV) {
                jLabel4.setVisible(false);
                valuesComboBox.setVisible(false);
            }

        }

        if (c.getRegistrationMethod() == RegistrationMethod.HAUSDORFF) {
            alignParamButton.setVisible(true);
        } else {
            alignParamButton.setVisible(false);
        }
        updateHistograms();
        setColors();

        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setContours(c.isUseContours());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setInnerSurfaceVisible(c.isInnerSurfaceSolid());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setUseGlyphs(c.isUseGlyphs());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(c.getFogVersion());
    }

    public histogramPanel getHistogram1() {
        return histogram1;
    }

    public void updateHistograms() {
        HDpaintingInfo hdp = getContext().getHdPaintingInfo();
        if (hdp == null) {
            return;
        }        
        if(hdp.getMinThreshValue() < hdp.getMinSelection()){
            hdp.setMinSelection(hdp.getMinThreshValue());
        }
        
         if(hdp.getMaxThreshValue() > hdp.getMaxSelection()){
            hdp.setMaxSelection(hdp.getMaxThreshValue());
        }

        List<Float> f = hdp.getDistance();

        histogram1.setHdp(getContext().getHdPaintingInfo());
        histogram1.setValues(f);
        histogram1.recomputeSliderPosition();

        histogram1.revalidate();
        histogram1.repaint();

        //    histogramPanel2.repaint();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox VisualizationBox;
    private javax.swing.JFrame alignFrame;
    private javax.swing.JButton alignParamButton;
    private javax.swing.JTable alignTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JRadioButton colorOverlayRadioButton;
    private javax.swing.JComboBox colorSchemeComboBox;
    private javax.swing.JPanel colormapPanel;
    private javax.swing.JButton comparisonButton;
    private javax.swing.JSlider cylLength;
    private javax.swing.JLabel cylLengthLabel;
    private javax.swing.JSlider cylRadius;
    private javax.swing.JLabel cylRadiusLabel;
    private javax.swing.JLabel densLabel;
    private javax.swing.JSlider density;
    private javax.swing.JButton exportNumResButton;
    private javax.swing.JPanel fogColorPanel;
    private javax.swing.JSlider fpDistanceSlider;
    private javax.swing.JSlider fpSizeSlider;
    private cz.fidentis.visualisation.histogram.histogramPanel histogram1;
    private javax.swing.JRadioButton innerSurfaceRadioButton;
    private javax.swing.JCheckBox innerSurfaceSolidCheckbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JSlider maxThresholdSlider;
    private javax.swing.JSpinner maxThresholdSpinner;
    private javax.swing.JSlider minThreshSlider;
    private javax.swing.JSpinner minThreshSpinner;
    private javax.swing.JRadioButton noneRadioButton;
    private javax.swing.JPanel primaryColorPanel;
    private javax.swing.JCheckBox primarySolidCheckbox;
    private javax.swing.JPanel secondaryColorPanel;
    private javax.swing.JCheckBox secondarySolidCheckbox;
    private javax.swing.JToggleButton selectionButton;
    private javax.swing.JPanel shadersPanel;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JSpinner transpSpinner;
    private javax.swing.JRadioButton transparencyRadioButton;
    private javax.swing.JSlider transparencySlider;
    private javax.swing.JCheckBox useContoursCheckbox;
    private javax.swing.JCheckBox useGlyphsCheckbox;
    private javax.swing.JComboBox valuesComboBox;
    // End of variables declaration//GEN-END:variables
}
