/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_two_faces;

import cz.fidentis.comparison.ComparisonMethod;
import cz.fidentis.comparison.ICPmetric;
import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.comparison.hausdorffDistance.ComparisonMetrics;
import cz.fidentis.visualisation.surfaceComparison.HDpainting;
import cz.fidentis.comparison.hausdorffDistance.HausdorffDistance;
import cz.fidentis.comparison.hausdorffDistance.NearestCurvature;
import cz.fidentis.comparison.icp.KdTreeFaces;
import cz.fidentis.comparison.kdTree.KDTreeIndexed;
import cz.fidentis.comparison.kdTree.KdTree;
import cz.fidentis.comparison.procrustes.Procrustes2Models;
import cz.fidentis.controller.Comparison2Faces;
import cz.fidentis.featurepoints.FacialPoint;
import cz.fidentis.featurepoints.FeaturePointsUniverse;
import cz.fidentis.featurepoints.curvature.CurvatureType;
import cz.fidentis.featurepoints.curvature.Curvature_jv;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.gui.guisetup.TwoFacesGUISetup;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.processing.exportProcessing.FPImportExport;
import cz.fidentis.processing.exportProcessing.ResultExports;
import cz.fidentis.renderer.ComparisonGLEventListener;
import cz.fidentis.utils.SortUtils;
import cz.fidentis.visualisation.procrustes.PApainting;
import cz.fidentis.visualisation.procrustes.PApaintingInfo;
import cz.fidentis.visualisation.surfaceComparison.HDpaintingInfo;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.color.ColorSpace;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.vecmath.Vector3f;
import jv.object.PsDebug;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.Exceptions;

/**
 *
 * @author Katka
 */
@SuppressWarnings("rawtypes")
public class PairComparisonConfiguration extends javax.swing.JPanel {

    JPanel activeColorPanel;
    private boolean transpTresholdValueChanged;

    /**
     * Creates new form ComparisonConfiguration
     */
    public PairComparisonConfiguration() {
        initComponents();
        activeColorPanel = new JPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        chooser = new javax.swing.JFileChooser();
        buttonGroup2 = new javax.swing.ButtonGroup();
        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        processComparisonButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        compMethodComboBox = new javax.swing.JComboBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        useDatabaseCheckbox = new javax.swing.JCheckBox();
        deafultDatabaseRadioButton = new javax.swing.JRadioButton();
        chooseDatabaseRadioButton = new javax.swing.JRadioButton();
        createDatabaseRadioButton = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        fpThresholdSlider = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        backRegistrationButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        exportFacesButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        visualizationPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        secondaryColorPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        primaryColorPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        transparencySlider = new javax.swing.JSlider();
        innerSurfaceSolidCheckbox = new javax.swing.JCheckBox();
        noneRadioButton = new javax.swing.JRadioButton();
        colorOverlayRadioButton = new javax.swing.JRadioButton();
        transparencyMappingRadioButton = new javax.swing.JRadioButton();
        innerSurfaceSolidRadioButton = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        useGlyphsCheckbox = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        fogColorPanel = new javax.swing.JPanel();
        useContoursCheckbox = new javax.swing.JCheckBox();
        secondarySolidCheckbox = new javax.swing.JCheckBox();
        primarySolidCheckbox = new javax.swing.JCheckBox();
        transpSpinner = new javax.swing.JSpinner();
        exportLandmarksButton = new javax.swing.JButton();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(processComparisonButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.processComparisonButton.text")); // NOI18N
        processComparisonButton.setMinimumSize(new java.awt.Dimension(279, 28));
        processComparisonButton.setPreferredSize(new java.awt.Dimension(279, 28));
        processComparisonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processComparisonButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel3.text")); // NOI18N

        compMethodComboBox.removeAllItems();
        compMethodComboBox.setModel(new DefaultComboBoxModel<>(ComparisonMethod.values()));
        compMethodComboBox.setMinimumSize(new java.awt.Dimension(191, 25));
        compMethodComboBox.setPreferredSize(new java.awt.Dimension(191, 25));
        compMethodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compMethodComboBoxActionPerformed(evt);
            }
        });

        jPanel1.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useDatabaseCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.useDatabaseCheckbox.text")); // NOI18N
        useDatabaseCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDatabaseCheckboxActionPerformed(evt);
            }
        });

        deafultDatabaseRadioButton.setVisible(false);
        buttonGroup2.add(deafultDatabaseRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(deafultDatabaseRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.deafultDatabaseRadioButton.text")); // NOI18N
        deafultDatabaseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deafultDatabaseRadioButtonActionPerformed(evt);
            }
        });

        chooseDatabaseRadioButton.setVisible(false);
        buttonGroup2.add(chooseDatabaseRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(chooseDatabaseRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.chooseDatabaseRadioButton.text")); // NOI18N
        chooseDatabaseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDatabaseRadioButtonActionPerformed(evt);
            }
        });

        createDatabaseRadioButton.setVisible(false);
        buttonGroup2.add(createDatabaseRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(createDatabaseRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.createDatabaseRadioButton.text")); // NOI18N
        createDatabaseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseRadioButtonActionPerformed(evt);
            }
        });

        jTextField1.setVisible(false);
        jTextField1.setText(org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jTextField1.text")); // NOI18N

        jButton1.setVisible(false);
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fpThresholdSlider.setMajorTickSpacing(20);
        fpThresholdSlider.setMinorTickSpacing(5);
        fpThresholdSlider.setPaintLabels(true);
        fpThresholdSlider.setPaintTicks(true);
        fpThresholdSlider.setValue(30);
        fpThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpThresholdSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel12.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fpThresholdSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(useDatabaseCheckbox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(createDatabaseRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseDatabaseRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deafultDatabaseRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useDatabaseCheckbox))
                .addGap(1, 1, 1)
                .addComponent(deafultDatabaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseDatabaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createDatabaseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        Hashtable tresholdTable = new Hashtable();
        tresholdTable.put(new Integer(0), new JLabel("0"));
        tresholdTable.put(new Integer(20), new JLabel("0,2"));
        tresholdTable.put(new Integer(40), new JLabel("0,4"));
        tresholdTable.put(new Integer(60), new JLabel("0,6"));
        tresholdTable.put(new Integer(80), new JLabel("0,8"));
        tresholdTable.put(new Integer(100), new JLabel("1"));
        fpThresholdSlider.setLabelTable(tresholdTable);

        org.openide.awt.Mnemonics.setLocalizedText(backRegistrationButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.backRegistrationButton.text")); // NOI18N
        backRegistrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backRegistrationButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportFacesButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.exportFacesButton.text")); // NOI18N
        exportFacesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFacesButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel9.text")); // NOI18N

        secondaryColorPanel.setBackground(new java.awt.Color(51, 153, 255));
        secondaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        secondaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout secondaryColorPanelLayout = new javax.swing.GroupLayout(secondaryColorPanel);
        secondaryColorPanel.setLayout(secondaryColorPanelLayout);
        secondaryColorPanelLayout.setHorizontalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        secondaryColorPanelLayout.setVerticalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel13.text")); // NOI18N

        primaryColorPanel.setBackground(new java.awt.Color(255, 255, 0));
        primaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        primaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                primaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout primaryColorPanelLayout = new javax.swing.GroupLayout(primaryColorPanel);
        primaryColorPanel.setLayout(primaryColorPanelLayout);
        primaryColorPanelLayout.setHorizontalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        primaryColorPanelLayout.setVerticalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel14.text")); // NOI18N

        transparencySlider.setMajorTickSpacing(20);
        transparencySlider.setMinorTickSpacing(5);
        transparencySlider.setPaintLabels(true);
        transparencySlider.setPaintTicks(true);
        transparencySlider.setValue(100);
        transparencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencySliderStateChanged(evt);
            }
        });

        innerSurfaceSolidCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(innerSurfaceSolidCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.innerSurfaceSolidCheckbox.text")); // NOI18N
        innerSurfaceSolidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innerSurfaceSolidCheckboxActionPerformed(evt);
            }
        });

        buttonGroup1.add(noneRadioButton);
        noneRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(noneRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.noneRadioButton.text")); // NOI18N
        noneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(colorOverlayRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(colorOverlayRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.colorOverlayRadioButton.text")); // NOI18N
        colorOverlayRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorOverlayRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(transparencyMappingRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(transparencyMappingRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.transparencyMappingRadioButton.text")); // NOI18N
        transparencyMappingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparencyMappingRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(innerSurfaceSolidRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(innerSurfaceSolidRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.innerSurfaceSolidRadioButton.text")); // NOI18N
        innerSurfaceSolidRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innerSurfaceSolidRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel15.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useGlyphsCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.useGlyphsCheckbox.text")); // NOI18N
        useGlyphsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useGlyphsCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.jLabel16.text")); // NOI18N

        fogColorPanel.setBackground(new java.awt.Color(255, 102, 204));
        fogColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fogColorPanel.setPreferredSize(new java.awt.Dimension(2, 14));
        fogColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fogColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fogColorPanelLayout = new javax.swing.GroupLayout(fogColorPanel);
        fogColorPanel.setLayout(fogColorPanelLayout);
        fogColorPanelLayout.setHorizontalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );
        fogColorPanelLayout.setVerticalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        useContoursCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useContoursCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.useContoursCheckbox.text")); // NOI18N
        useContoursCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useContoursCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(secondarySolidCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.secondarySolidCheckbox.text")); // NOI18N
        secondarySolidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondarySolidCheckboxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(primarySolidCheckbox, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.primarySolidCheckbox.text")); // NOI18N
        primarySolidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primarySolidCheckboxActionPerformed(evt);
            }
        });

        transpSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        transpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transpSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout visualizationPanelLayout = new javax.swing.GroupLayout(visualizationPanel);
        visualizationPanel.setLayout(visualizationPanelLayout);
        visualizationPanelLayout.setHorizontalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(visualizationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(useContoursCheckbox)
                            .addComponent(useGlyphsCheckbox)
                            .addComponent(innerSurfaceSolidCheckbox)
                            .addGroup(visualizationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(innerSurfaceSolidRadioButton)
                                    .addComponent(transparencyMappingRadioButton)
                                    .addComponent(colorOverlayRadioButton)
                                    .addComponent(noneRadioButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transpSpinner))
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel9)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(primaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fogColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(secondaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondarySolidCheckbox)
                            .addComponent(primarySolidCheckbox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        visualizationPanelLayout.setVerticalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(primaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(4, 4, 4)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(visualizationPanelLayout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addComponent(primarySolidCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondaryColorPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(secondarySolidCheckbox, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fogColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(innerSurfaceSolidCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(useGlyphsCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useContoursCheckbox)
                .addGap(7, 7, 7)
                .addGroup(visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noneRadioButton)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(colorOverlayRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transparencyMappingRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(innerSurfaceSolidRadioButton))
        );

        org.openide.awt.Mnemonics.setLocalizedText(exportLandmarksButton, org.openide.util.NbBundle.getMessage(PairComparisonConfiguration.class, "PairComparisonConfiguration.exportLandmarksButton.text")); // NOI18N
        exportLandmarksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLandmarksButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processComparisonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(66, 66, 66)
                                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel3))
                            .addGap(18, 18, 18)
                            .addComponent(compMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(exportFacesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(visualizationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(exportLandmarksButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backRegistrationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                .addContainerGap(293, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(compMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processComparisonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualizationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportFacesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportLandmarksButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backRegistrationButton)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void compMethodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compMethodComboBoxActionPerformed
        if (((ComparisonMethod) compMethodComboBox.getSelectedItem()) == ComparisonMethod.PROCRUSTES) {
            jPanel1.setVisible(true);
            //  visualisationPanel.setVisible(false);

        }
        if ((ComparisonMethod) compMethodComboBox.getSelectedItem() == ComparisonMethod.HAUSDORFF_DIST ||
               (ComparisonMethod) compMethodComboBox.getSelectedItem() == ComparisonMethod.HAUSDORFF_CURV ) {
            jPanel1.setVisible(false);
            //  visualisationPanel.setVisible(true);

        }
        getContext().setComparisonMethod((ComparisonMethod) compMethodComboBox.getSelectedItem());
    }//GEN-LAST:event_compMethodComboBoxActionPerformed

    public void computeComparison(final ProjectTopComponent tc) {
        Model main = tc.getViewerPanel_2Faces().getListener1().getModel(); //hlavny model v lavom panele
        Model compare = tc.getViewerPanel_2Faces().getListener2().getModel(); //vedlajsi model v pravom panele
        final Comparison2Faces c = getContext();

        if (main == null || compare == null) {
            System.out.print("Some models were not loaded.");
            return;
        }

        if (c.getRegistrationMethod() == RegistrationMethod.NO_REGISTRATION) {//no registration
            main = ModelLoader.instance().loadModel(c.getModel1().getFile(), false, false);
            compare = ModelLoader.instance().loadModel(c.getModel2().getFile(), false, false);
        }
        
        final Model compareFace = main;

        Runnable run = new Runnable() {
            @Override
            public void run() {
                ProgressHandle p;

                p = ProgressHandleFactory.createHandle("Computing comparison...");

                try {

                    p.start(100);

                    processComparisonButton.setEnabled(false);
                    c.setCompareButtonEnabled(false);
                    //Computing Hausdorff Distance
                    if (c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_DIST
                            || c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_CURV) {
                        List<Float> hdDistance = null;

                        if (c.getComparisonMethod() == ComparisonMethod.HAUSDORFF_DIST) {
                            KdTree mainF;
                            
                            if(c.getIcpMetric() == ICPmetric.VERTEX_TO_MESH){
                                mainF = new KdTreeFaces(c.getModel2().getVerts(),
                                        c.getModel2().getFaces());
                            }else{
                                mainF = new KDTreeIndexed(c.getModel2().getVerts());
                            }
                            
                            List<Vector3f> usedNormals = compareFace.getNormals();
                            

                            if (compareFace.getVerts().size() > compareFace.getNormals().size()) {
                                usedNormals = SurfaceComparisonProcessing.instance().recomputeVertexNormals(compareFace);
                                compareFace.setNormals((ArrayList<Vector3f>) usedNormals);
                            }

                            /*if (mainF == null) {
                                mainF = new KdTreeIndexed(mainFace.getVerts());
                            }*/

                            p.setDisplayName("Computing Hausdorff Distance...");
                            p.progress(90);
                            hdDistance = HausdorffDistance.instance().hDistance(mainF, compareFace.getVerts(), usedNormals, true);
                        } else {
                            //in case vertex-to-plane metric was used created new kd-tree to be able to get index of nearest neighbor
                            KDTreeIndexed mainF = new KDTreeIndexed(c.getModel2().getVerts());
                            double[] mainCurvature = new Curvature_jv(c.getModel2()).getCurvature(CurvatureType.Gaussian);
                            double[] secondaryCurvature = new Curvature_jv(c.getModel1()).getCurvature(CurvatureType.Gaussian);

                            p.setDisplayName("Computing Nearest Neighbor curvature...");
                            p.progress(90);
                            hdDistance = NearestCurvature.instance().nearestCurvature(mainF, compareFace.getVerts(), mainCurvature, secondaryCurvature);
                            //hdDistance = ComparisonMetrics.instance().thresoldValuesKeepSort(hdDistance, 0.99f, false);
                        }

                        tc.getViewerPanel_2Faces().getListener1().setProcrustes(false);

                        c.setHd(hdDistance);
                        List<Float> sortedValuesRel = SortUtils.instance().sortValues(hdDistance);
                        List<Float> absValues = new LinkedList<>();

                        for (Float f : hdDistance) {
                            absValues.add(Math.abs(f));
                        }

                        List<Float> sortedValuesAbs = SortUtils.instance().sortValues(absValues);

                        c.setSortedHdValuesAbs(sortedValuesAbs);
                        c.setSortedHdValuesRelative(sortedValuesRel);

                        HDpaintingInfo info = new HDpaintingInfo(hdDistance, c.getModel1(), true);

                        HDpainting paintMain = new HDpainting(info);

                        tc.getViewerPanel_2Faces().getListener1().drawHD(true);
                        tc.getViewerPanel_2Faces().getListener1().setHdPaint(paintMain);
                        tc.getViewerPanel_2Faces().getListener1().setHdInfo(info);
                        c.setHDP(paintMain);
                        c.setHdPaintingInfo(info);

                        c.setNumericalResults(SurfaceComparisonProcessing.instance().getNumericResults(hdDistance, true));
                        c.setLowerHDTreshold(0.0f);
                        c.setUpperHDTreshold(1f);

                        tc.getViewerPanel_2Faces().setResultButtonVisible(true, 0);
                    } else {
                        //starting Procrustes analysis

                        //Procrustes Analysis with database
                        if (createDatabaseRadioButton.isSelected()) {
                            //creating database
                            p.setDisplayName("Processing database...");
                            File[] files = chooser.getSelectedFiles();
                            
                            Model model;
                            List<FacialPoint> facialPoints;
                            FeaturePointsUniverse fpUniverse;
                            for (File file : files) {
                                model = ModelLoader.instance().loadModel(file, false, true);

                                fpUniverse = new FeaturePointsUniverse(model);
                                facialPoints = new ArrayList<FacialPoint>();

                                PsDebug.setDebug(false);
                                PsDebug.setError(false);
                                PsDebug.setWarning(false);
                                PsDebug.setMessage(false);
                                fpUniverse.findNose();
                                facialPoints = fpUniverse.getFacialPoints();
                                fpUniverse.findMouth();
                                facialPoints = fpUniverse.getFacialPoints();
                                fpUniverse.findEyes();
                                facialPoints = fpUniverse.getFacialPoints();
                                PsDebug.getConsole().setVisible(false);

                                c.addFacialPoints(facialPoints);
                            }

                        }

                        p.setDisplayName("Computing coparison...");

                        PApaintingInfo paInfo = new PApaintingInfo(null, null, 0);

                        if (c.isFpScaling()) {
                            tc.getViewerPanel_2Faces().getListener1().setCameraPosition(0, 0, 700);
                            paInfo.setPointSize(30 * 3);

                        } else {
                            tc.getViewerPanel_2Faces().getListener1().setCameraPosition(0, 0, 700);
                            paInfo.setPointSize(30 * 3);

                        }

                        tc.getViewerPanel_2Faces().getListener1().setProcrustes(true);


                        //choosing type of used database -- currently unavalable
                        if (useDatabaseCheckbox.isSelected()) {
                            Procrustes2Models procrustes = null;
                            try {
                                if (deafultDatabaseRadioButton.isSelected()) {
                                    procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                            tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), c.isFpScaling());

                                } else if (chooseDatabaseRadioButton.isSelected()) {
                                    if (!jTextField1.getText().endsWith(".txt")) {
                                        throw new IllegalArgumentException("Cannot be used as database.");
                                    } else {
                                        procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                                tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), jTextField1.getText(), c.isFpScaling());
                                    }
                                } else {
                                    List<List<FacialPoint>> list = c.getDatabasePoints();
                                    procrustes = new Procrustes2Models(tc.getViewerPanel_2Faces().getListener1().getFpUniverse().getFacialPoints(),
                                            tc.getViewerPanel_2Faces().getListener2().getFpUniverse().getFacialPoints(), list, c.isFpScaling());
                                }

                                String result = procrustes.compare2ModelsWithDatabase(fpThresholdSlider.getValue() / 100f);
  
                                c.setNumericalResults(result);

                                paInfo.setGpa(procrustes.getGpa());
   

                            } catch (FileNotFoundException ex) {
                                Exceptions.printStackTrace(ex);
                                p.finish();
                                processComparisonButton.setEnabled(true);
                                tc.getProject().getSelectedComparison2Faces().setCompareButtonEnabled(true);
                            }

                        } else {
                            //Procrustes analysis without using database
                            try {
                                Procrustes2Models procrustes = new Procrustes2Models(c.getMainFp(),
                                        c.getSecondaryFp(), c.isFpScaling());

                                String result = procrustes.compare2Models(c.getFpTreshold() / 100f);
                                c.setNumericalResults(result);

                                paInfo.setPa(procrustes.getPa());
                                paInfo.setPa2(procrustes.getPa2());
                                paInfo.setGpa(procrustes.getGpa());

                            } catch (FileNotFoundException ex) {
                                Exceptions.printStackTrace(ex);
                                p.finish();
                                processComparisonButton.setEnabled(true);
                                c.setCompareButtonEnabled(true);
                            }
                        }

                        tc.getViewerPanel_2Faces().getListener1().setPaInfo(paInfo);
                        tc.getViewerPanel_2Faces().getListener1().setPaPainting(new PApainting(paInfo));

                    }
                    processComparisonButton.setEnabled(true);
                    c.setCompareButtonEnabled(true);
                    c.setState(3);

                    tc.getViewerPanel_2Faces().setResultButtonVisible(false, 0);

                    p.finish();
                } catch (Exception ex) {
                   Exceptions.printStackTrace(ex);
                   processComparisonButton.setEnabled(true);
                }finally{
                     p.finish();
                }
                
                TwoFacesGUISetup.setUpComparisonResultDefaultData(c);
                
                if (GUIController.getSelectedProjectTopComponent() == tc) {
                        GUIController.getConfigurationTopComponent().addPairComparisonResults();
                }
            }
        };
        Thread t = new Thread(run);
        t.start(); // start the task and progress visualisation
    }

    private void processComparisonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processComparisonButtonActionPerformed
        computeComparison(GUIController.getSelectedProjectTopComponent());

    }//GEN-LAST:event_processComparisonButtonActionPerformed

    private void backRegistrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backRegistrationButtonActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().setResultButtonVisible(false, 0);
        //if (GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getNumberOfModels() > 1) {
            Model model = ModelLoader.instance().loadModel(GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().getModel().getFile(), false, true);

            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setModels(model);
            
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setFacialPoints(null);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFacialPoints(null);
            
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener2().setProcrustes(false);
            
            
            model = ModelLoader.instance().loadModel(GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().getModel().getFile(), false, true);
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setModels(model);
        //}
        getContext().setState(1);
        GUIController.getConfigurationTopComponent().addRegistrationComponent();

    }//GEN-LAST:event_backRegistrationButtonActionPerformed

    private void exportFacesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFacesButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        ResultExports.instance().exportModels(tc,
                getContext().getModel1(),
                getContext().getModel2());
    }//GEN-LAST:event_exportFacesButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        activeColorPanel.setBackground(jColorChooser1.getColor());
        setColors();


    }//GEN-LAST:event_jButton5ActionPerformed

    private void secondaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondaryColorPanelMouseClicked
        activeColorPanel = secondaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_secondaryColorPanelMouseClicked

    private void primaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_primaryColorPanelMouseClicked
        activeColorPanel = primaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_primaryColorPanelMouseClicked

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        if (!transpTresholdValueChanged) {
            transpTresholdValueChanged = true;
            getContext().setOverlayTransparency(transparencySlider.getValue());        
            transpSpinner.setValue((int)getContext().getOverlayTransparency());
            setColors();
            transpTresholdValueChanged = false;
        }
    }//GEN-LAST:event_transparencySliderStateChanged

    private void innerSurfaceSolidCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerSurfaceSolidCheckboxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setInnerSurfaceVisible(innerSurfaceSolidCheckbox.isSelected());
        getContext().setInnerSurfaceSolid(innerSurfaceSolidCheckbox.isSelected());
    }//GEN-LAST:event_innerSurfaceSolidCheckboxActionPerformed

    private void noneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneRadioButtonActionPerformed
        if (noneRadioButton.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(0);
            getContext().setFogVersion(0);
        }
    }//GEN-LAST:event_noneRadioButtonActionPerformed

    private void colorOverlayRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorOverlayRadioButtonActionPerformed
        if (colorOverlayRadioButton.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(1);
            getContext().setFogVersion(1);
        }
    }//GEN-LAST:event_colorOverlayRadioButtonActionPerformed

    private void transparencyMappingRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparencyMappingRadioButtonActionPerformed
        if (transparencyMappingRadioButton.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(2);
            getContext().setFogVersion(2);
        }
    }//GEN-LAST:event_transparencyMappingRadioButtonActionPerformed

    private void innerSurfaceSolidRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerSurfaceSolidRadioButtonActionPerformed
        if (innerSurfaceSolidRadioButton.isSelected()) {
            GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(3);
            getContext().setFogVersion(3);
        }
    }//GEN-LAST:event_innerSurfaceSolidRadioButtonActionPerformed

    private void useGlyphsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useGlyphsCheckboxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setUseGlyphs(useGlyphsCheckbox.isSelected());
        getContext().setUseGlyphs(useGlyphsCheckbox.isSelected());
    }//GEN-LAST:event_useGlyphsCheckboxActionPerformed

    private void fogColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fogColorPanelMouseClicked
        activeColorPanel = fogColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_fogColorPanelMouseClicked

    private void useContoursCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useContoursCheckboxActionPerformed
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setContours(useContoursCheckbox.isSelected());
        getContext().setUseContours(useContoursCheckbox.isSelected());
    }//GEN-LAST:event_useContoursCheckboxActionPerformed

    private void secondarySolidCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondarySolidCheckboxActionPerformed
        getContext().setIsSecondarySolid(secondarySolidCheckbox.isSelected());
        setColors();
    }//GEN-LAST:event_secondarySolidCheckboxActionPerformed

    private void primarySolidCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primarySolidCheckboxActionPerformed
        getContext().setIsPrimarySolid(primarySolidCheckbox.isSelected());
        setColors();
    }//GEN-LAST:event_primarySolidCheckboxActionPerformed

    private void exportLandmarksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLandmarksButtonActionPerformed
        final ProjectTopComponent tc = GUIController.getSelectedProjectTopComponent();
        FPImportExport.instance().exportTwoFaces(tc,
                tc.getViewerPanel_2Faces().getListener1().getFacialPoints(),
                tc.getViewerPanel_2Faces().getListener1().getModel(),
                tc.getViewerPanel_2Faces().getListener2().getFacialPoints(),
                tc.getViewerPanel_2Faces().getListener2().getModel());
    }//GEN-LAST:event_exportLandmarksButtonActionPerformed

    private void fpThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpThresholdSliderStateChanged
        getContext().setFpTreshold(fpThresholdSlider.getValue());
    }//GEN-LAST:event_fpThresholdSliderStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //currently unavailable

        if (chooseDatabaseRadioButton.isSelected()) {

            FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT files", "txt");
            chooser.setFileFilter(filter);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setMultiSelectionEnabled(false);

            int returnVal = chooser.showOpenDialog(GUIController.getSelectedProjectTopComponent());
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                jTextField1.setText(chooser.getSelectedFile().getPath());

            }
        } else if (this.createDatabaseRadioButton.isSelected()) {
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "OBJ files", "obj");
            chooser.setFileFilter(filter);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setMultiSelectionEnabled(true);

            int returnVal = chooser.showOpenDialog(GUIController.getSelectedProjectTopComponent());

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String names = "";
                for (int i = 0; i < chooser.getSelectedFiles().length; i++) {
                    names += chooser.getSelectedFiles()[i].getName() + ";";
                }
                jTextField1.setText(names);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void createDatabaseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseRadioButtonActionPerformed
        jTextField1.setVisible(true);
        jButton1.setVisible(true);
    }//GEN-LAST:event_createDatabaseRadioButtonActionPerformed

    private void chooseDatabaseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDatabaseRadioButtonActionPerformed
        jTextField1.setVisible(true);
        jButton1.setVisible(true);
    }//GEN-LAST:event_chooseDatabaseRadioButtonActionPerformed

    private void deafultDatabaseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deafultDatabaseRadioButtonActionPerformed
        jTextField1.setVisible(false);
        jButton1.setVisible(false);
    }//GEN-LAST:event_deafultDatabaseRadioButtonActionPerformed

    private void useDatabaseCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDatabaseCheckboxActionPerformed
        //currently unavailable

        if (useDatabaseCheckbox.isSelected()) {
            deafultDatabaseRadioButton.setVisible(true);
            chooseDatabaseRadioButton.setVisible(true);
            createDatabaseRadioButton.setVisible(true);
            if (chooseDatabaseRadioButton.isSelected() || createDatabaseRadioButton.isSelected()) {
                jTextField1.setVisible(true);
                jButton1.setVisible(true);
                if (chooseDatabaseRadioButton.isSelected()) {
                    getContext().setUseDatabase(2);
                } else {
                    getContext().setUseDatabase(3);
                }
            }
            if (!chooseDatabaseRadioButton.isSelected() && !createDatabaseRadioButton.isSelected()) {
                deafultDatabaseRadioButton.setSelected(true);
                getContext().setUseDatabase(1);
            }
        } else {
            deafultDatabaseRadioButton.setVisible(false);
            chooseDatabaseRadioButton.setVisible(false);
            createDatabaseRadioButton.setVisible(false);
            jTextField1.setVisible(false);
            jButton1.setVisible(false);
            getContext().setUseDatabase(0);
        }
    }//GEN-LAST:event_useDatabaseCheckboxActionPerformed

    private void transpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transpSpinnerStateChanged
        if (!transpTresholdValueChanged) {
            transpTresholdValueChanged = true;
            getContext().setOverlayTransparency((int)transpSpinner.getValue());
            transparencySlider.setValue((int)getContext().getOverlayTransparency());
            setColors();
            transpTresholdValueChanged = false;
        }
    }//GEN-LAST:event_transpSpinnerStateChanged

    public void setProcessComparisonEnabled(boolean en) {
        processComparisonButton.setEnabled(en);
    }

    private String setValues(List<Float> hdDistance) {
        return ("Min;" + ComparisonMetrics.instance().findMinDistance(hdDistance, true) + "\n"
                + "Max;" + ComparisonMetrics.instance().findMaxDistance(hdDistance, true) + "\n"
                + "RMS;" + ComparisonMetrics.instance().rootMeanSqr(hdDistance, true) + "\n"
                + "Arithmetic Mean;" + ComparisonMetrics.instance().aritmeticMean(hdDistance, true) + "\n"
                + "Geomertic Mean;" + ComparisonMetrics.instance().geometricMean(hdDistance, true)) + "\n"
                + "75 Percentile;" + ComparisonMetrics.instance().percentileSeventyFive(hdDistance, true);
    }

    public void setConfiguration() {        
        Comparison2Faces c = getContext();
        if(c.getRegistrationMethod() == RegistrationMethod.PROCRUSTES){
            exportLandmarksButton.setVisible(true);
        }else{
            exportLandmarksButton.setVisible(false);
        }
        
        //because some items need to be dynamically added/removed
        compMethodComboBox.setModel(new DefaultComboBoxModel(ComparisonMethod.values()));
 
        
        //use database currently unavailable
        useDatabaseCheckbox.setVisible(false);
        jLabel7.setVisible(false);
        
       compMethodComboBox.setSelectedItem(c.getComparisonMethod());
       
       //FP
       useDatabaseCheckbox.setSelected(c.getUseDatabase() != 0);
       fpThresholdSlider.setValue(c.getFpTreshold());
       
       //overlay
        primaryColorPanel.setBackground(c.getPrimaryColor());
        primarySolidCheckbox.setSelected(c.isIsPrimarySolid());
        secondaryColorPanel.setBackground(c.getSecondaryColor());
        secondarySolidCheckbox.setSelected(c.isIsSecondarySolid());
        fogColorPanel.setBackground(c.getFogColor());
        transparencySlider.setValue((int) c.getOverlayTransparency());
        transpSpinner.setValue((int) c.getOverlayTransparency());
        innerSurfaceSolidCheckbox.setSelected(c.isInnerSurfaceSolid());
        useGlyphsCheckbox.setSelected(c.isUseGlyphs());
        useContoursCheckbox.setSelected(c.isUseContours());
        
        switch(c.getFogVersion()){
            case 0:
                noneRadioButton.setSelected(true);
                break;
            case 1:
                colorOverlayRadioButton.setSelected(true);
                break;
            case 2:
                transparencyMappingRadioButton.setSelected(true);
                break;
            case 3:
                innerSurfaceSolidRadioButton.setSelected(true);
                break;
            default:
                noneRadioButton.setSelected(true);
        }
        
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(c.getFogVersion());
        
        if ((c.getRegistrationMethod() != RegistrationMethod.PROCRUSTES)) {
            compMethodComboBox.removeItem(ComparisonMethod.PROCRUSTES);
        }

        switch (c.getUseDatabase()) {
            case 0:
                useDatabaseCheckbox.setSelected(false);
                deafultDatabaseRadioButton.setVisible(false);
                chooseDatabaseRadioButton.setVisible(false);
                createDatabaseRadioButton.setVisible(false);
                jTextField1.setVisible(false);
                jButton1.setVisible(false);
                break;
            case 1:
                useDatabaseCheckbox.setSelected(true);
                deafultDatabaseRadioButton.setVisible(true);
                chooseDatabaseRadioButton.setVisible(true);
                createDatabaseRadioButton.setVisible(true);
                jTextField1.setVisible(false);
                jButton1.setVisible(false);
                deafultDatabaseRadioButton.setSelected(true);
                break;
            case 2:
                useDatabaseCheckbox.setSelected(true);
                deafultDatabaseRadioButton.setVisible(true);
                chooseDatabaseRadioButton.setVisible(true);
                createDatabaseRadioButton.setVisible(true);
                jTextField1.setVisible(true);
                jButton1.setVisible(true);
                chooseDatabaseRadioButton.setSelected(true);
                break;
            case 3:
                useDatabaseCheckbox.setSelected(true);
                deafultDatabaseRadioButton.setVisible(true);
                chooseDatabaseRadioButton.setVisible(true);
                createDatabaseRadioButton.setVisible(true);
                jTextField1.setVisible(true);
                jButton1.setVisible(true);
                createDatabaseRadioButton.setSelected(true);
                break;
        }
        setColors();
        
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setContours(c.isUseContours());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setInnerSurfaceVisible(c.isInnerSurfaceSolid());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setUseGlyphs(c.isUseGlyphs());
        GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1().setFogVersion(c.getFogVersion());
        
        processComparisonButton.setEnabled(c.isCompareButtonEnabled());

    }
    
    private Comparison2Faces getContext(){
        return GUIController.getSelectedProjectTopComponent().getProject().getSelectedComparison2Faces();
    }

    public void setColors() {
        ComparisonGLEventListener tc = GUIController.getSelectedProjectTopComponent().getViewerPanel_2Faces().getListener1();
        Comparison2Faces c = getContext();
        float[] color = new float[4];
        
        primaryColorPanel.getBackground().getRGBColorComponents(color);
        color[3] = c.isIsPrimarySolid() ? 1 : c.getOverlayTransparency() / (float) 100;
        tc.setPrimaryColor(color);
        c.setPrimaryColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color, 1));

        float[] color2 = new float[4];
        secondaryColorPanel.getBackground().getRGBColorComponents(color2);
        color2[3] = c.isIsSecondarySolid() ? 1 : c.getOverlayTransparency() / (float) 100;
        tc.setSecondaryColor(color2);
        c.setSecondaryColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color2, 1));
        
        float[] color3 = new float[4];
        fogColorPanel.getBackground().getRGBColorComponents(color3);

        tc.setFogColor(color3);
        c.setFogColor(new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB), color3, 1));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backRegistrationButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JRadioButton chooseDatabaseRadioButton;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JRadioButton colorOverlayRadioButton;
    private javax.swing.JComboBox compMethodComboBox;
    private javax.swing.JRadioButton createDatabaseRadioButton;
    private javax.swing.JRadioButton deafultDatabaseRadioButton;
    private javax.swing.JButton exportFacesButton;
    private javax.swing.JButton exportLandmarksButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel fogColorPanel;
    private javax.swing.JSlider fpThresholdSlider;
    private javax.swing.JCheckBox innerSurfaceSolidCheckbox;
    private javax.swing.JRadioButton innerSurfaceSolidRadioButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton noneRadioButton;
    private javax.swing.JPanel primaryColorPanel;
    private javax.swing.JCheckBox primarySolidCheckbox;
    private javax.swing.JButton processComparisonButton;
    private javax.swing.JPanel secondaryColorPanel;
    private javax.swing.JCheckBox secondarySolidCheckbox;
    private javax.swing.JSpinner transpSpinner;
    private javax.swing.JRadioButton transparencyMappingRadioButton;
    private javax.swing.JSlider transparencySlider;
    private javax.swing.JCheckBox useContoursCheckbox;
    private javax.swing.JCheckBox useDatabaseCheckbox;
    private javax.swing.JCheckBox useGlyphsCheckbox;
    private javax.swing.JPanel visualizationPanel;
    // End of variables declaration//GEN-END:variables
}
