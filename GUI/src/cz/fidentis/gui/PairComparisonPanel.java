/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui;

import cz.fidentis.comparison.hausdorffDistance.ComparisonMetrics;
import cz.fidentis.comparison.hausdorffDistance.HausdorffDistance;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.renderer.ComparisonGLEventListener;
import cz.fidentis.utils.SortUtils;
import cz.fidentis.visualisation.ColorScheme;
import cz.fidentis.visualisation.surfaceComparison.HDpainting;
import cz.fidentis.visualisation.surfaceComparison.HDpaintingInfo;
import cz.fidentis.visualisation.surfaceComparison.SelectionType;
import cz.fidentis.visualisation.surfaceComparison.VisualizationType;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.media.opengl.GLEventListener;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author xfurman
 */
public class PairComparisonPanel extends javax.swing.JPanel {

    private ComparisonGLEventListener listener;
    JPanel activeColorPanel;
    String result;
    private boolean maxTresholdValueChanged;
    private boolean minTresholdValueChanged;
    private float mouseDraggedX;
    private float mouseDraggedY;
    private boolean selection;
    private HDpaintingInfo info;
    private HDpainting hdp;
    private List<Float> sorted;
    private List<Float> originalDist;
    private boolean transpTresholdValueChanged;

    /**
     * Creates new form PairComparisonPanel
     */
    public PairComparisonPanel() {
        initComponents();

        listener = new ComparisonGLEventListener();
        canvas1.addGLEventListener(listener);
        listener.setCameraPosition(0, 0, 300);
    }

    public void setInfo(HDpainting p) {
        this.info = p.getInfo();
        this.hdp = p;
        histogram1.setHdp(p.getInfo());
        histogram1.setValues(info.getDistance());
        originalDist = info.getDistance();
        sorted = SortUtils.instance().sortValues(originalDist);
        maxThresholdSlider.setValue(100);

    }

    public ComparisonGLEventListener getListener() {
        return listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        colorDialog = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        VisualizationBox = new javax.swing.JComboBox();
        densLabel = new javax.swing.JLabel();
        density = new javax.swing.JSlider();
        shadersPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        primaryColorPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        secondaryColorPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        transparencySlider = new javax.swing.JSlider();
        jCheckBox1 = new javax.swing.JCheckBox();
        noneRadioButton = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        fogColorPanel = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        transpSpinner = new javax.swing.JSpinner();
        colormapPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        histogram1 = new cz.fidentis.visualisation.histogram.histogramPanel();
        selectionButton = new javax.swing.JToggleButton();
        jButton6 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        maxThresholdSlider = new javax.swing.JSlider();
        maxThresholdSpinner = new javax.swing.JSpinner();
        minThreshSlider = new javax.swing.JSlider();
        minThreshSpinner = new javax.swing.JSpinner();
        canvasPanel = new javax.swing.JPanel();
        canvas1 = new cz.fidentis.gui.Canvas();
        jComboBox3 = new javax.swing.JComboBox();

        Dimension dimension = new Dimension();
        dimension.setSize(jColorChooser1.getPreferredSize().width + 5, jColorChooser1.getPreferredSize().height+80);
        colorDialog.setMinimumSize(dimension);
        colorDialog.setModal(true);
        colorDialog.setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton5, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorDialogLayout = new javax.swing.GroupLayout(colorDialog.getContentPane());
        colorDialog.getContentPane().setLayout(colorDialogLayout);
        colorDialogLayout.setHorizontalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(6, 6, 6))
        );
        colorDialogLayout.setVerticalGroup(
            colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorDialogLayout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel3.text")); // NOI18N

        VisualizationBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Color map", "Vectors", "Transparency+Fog" }));
        VisualizationBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualizationBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(densLabel, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.densLabel.text")); // NOI18N

        density.setMajorTickSpacing(10);
        density.setMinorTickSpacing(5);
        density.setPaintLabels(true);
        density.setPaintTicks(true);
        density.setVisible(false);
        densLabel.setVisible(false);

        shadersPanel.setVisible(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel8.text")); // NOI18N

        primaryColorPanel.setBackground(new java.awt.Color(51, 153, 255));
        primaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        primaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                primaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout primaryColorPanelLayout = new javax.swing.GroupLayout(primaryColorPanel);
        primaryColorPanel.setLayout(primaryColorPanelLayout);
        primaryColorPanelLayout.setHorizontalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        primaryColorPanelLayout.setVerticalGroup(
            primaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel12.text")); // NOI18N

        secondaryColorPanel.setBackground(new java.awt.Color(255, 255, 0));
        secondaryColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        secondaryColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondaryColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout secondaryColorPanelLayout = new javax.swing.GroupLayout(secondaryColorPanel);
        secondaryColorPanel.setLayout(secondaryColorPanelLayout);
        secondaryColorPanelLayout.setHorizontalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        secondaryColorPanelLayout.setVerticalGroup(
            secondaryColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel13.text")); // NOI18N

        transparencySlider.setMajorTickSpacing(20);
        transparencySlider.setMinorTickSpacing(5);
        transparencySlider.setPaintLabels(true);
        transparencySlider.setPaintTicks(true);
        transparencySlider.setValue(100);
        transparencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencySliderStateChanged(evt);
            }
        });

        jCheckBox1.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(noneRadioButton);
        noneRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(noneRadioButton, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.noneRadioButton.text")); // NOI18N
        noneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton2, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jRadioButton2.text")); // NOI18N
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton3, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jRadioButton3.text")); // NOI18N
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButton4, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jRadioButton4.text")); // NOI18N
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel14.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox2, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jCheckBox2.text")); // NOI18N
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel15.text")); // NOI18N

        fogColorPanel.setBackground(new java.awt.Color(255, 102, 204));
        fogColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fogColorPanel.setPreferredSize(new java.awt.Dimension(2, 14));
        fogColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fogColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fogColorPanelLayout = new javax.swing.GroupLayout(fogColorPanel);
        fogColorPanel.setLayout(fogColorPanelLayout);
        fogColorPanelLayout.setHorizontalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );
        fogColorPanelLayout.setVerticalGroup(
            fogColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        jCheckBox7.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox7, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jCheckBox7.text")); // NOI18N
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox4, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jCheckBox4.text")); // NOI18N
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox3, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jCheckBox3.text")); // NOI18N
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        transpSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        transpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transpSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout shadersPanelLayout = new javax.swing.GroupLayout(shadersPanel);
        shadersPanel.setLayout(shadersPanelLayout);
        shadersPanelLayout.setHorizontalGroup(
            shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shadersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel8)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(shadersPanelLayout.createSequentialGroup()
                                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fogColorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(secondaryColorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(primaryColorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox3)
                                    .addComponent(jCheckBox4)))
                            .addGroup(shadersPanelLayout.createSequentialGroup()
                                .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transpSpinner))))
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox1)
                    .addGroup(shadersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton4)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton2)
                            .addComponent(noneRadioButton))))
                .addContainerGap())
        );
        shadersPanelLayout.setVerticalGroup(
            shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shadersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(primaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8))
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(secondaryColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(fogColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addGap(7, 7, 7)
                .addGroup(shadersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noneRadioButton)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton4)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel4.text")); // NOI18N

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Relative", "Absolute" }));
        jComboBox2.setMinimumSize(new java.awt.Dimension(67, 25));
        jComboBox2.setPreferredSize(new java.awt.Dimension(67, 25));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        histogram1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                histogram1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout histogram1Layout = new javax.swing.GroupLayout(histogram1);
        histogram1.setLayout(histogram1Layout);
        histogram1Layout.setHorizontalGroup(
            histogram1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        histogram1Layout.setVerticalGroup(
            histogram1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 218, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(selectionButton, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.selectionButton.text")); // NOI18N
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rectangle", "Ellipse" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel21, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel21.text")); // NOI18N

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Diverging", "Rainbow" }));
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(PairComparisonPanel.class, "PairComparisonPanel.jLabel5.text")); // NOI18N

        maxThresholdSlider.setMajorTickSpacing(20);
        maxThresholdSlider.setMinorTickSpacing(5);
        maxThresholdSlider.setPaintLabels(true);
        maxThresholdSlider.setPaintTicks(true);
        maxThresholdSlider.setValue(75);
        maxThresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxThresholdSliderStateChanged(evt);
            }
        });

        maxThresholdSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 100, 1));
        maxThresholdSpinner.setValue(98);
        maxThresholdSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxThresholdSpinnerStateChanged(evt);
            }
        });

        minThreshSlider.setMajorTickSpacing(20);
        minThreshSlider.setMinorTickSpacing(5);
        minThreshSlider.setPaintLabels(true);
        minThreshSlider.setPaintTicks(true);
        minThreshSlider.setValue(0);
        minThreshSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minThreshSliderStateChanged(evt);
            }
        });

        minThreshSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        minThreshSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minThreshSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout colormapPanelLayout = new javax.swing.GroupLayout(colormapPanel);
        colormapPanel.setLayout(colormapPanelLayout);
        colormapPanelLayout.setHorizontalGroup(
            colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(histogram1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colormapPanelLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minThreshSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minThreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxThresholdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        colormapPanelLayout.setVerticalGroup(
            colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colormapPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(maxThresholdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(maxThresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minThreshSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minThreshSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(histogram1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(colormapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectionButton)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(densLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(density, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(VisualizationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(shadersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(colormapPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(VisualizationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(colormapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(density, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(densLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shadersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        canvas1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvas1MouseDragged(evt);
            }
        });
        canvas1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvas1MouseWheelMoved(evt);
            }
        });
        canvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvas1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvas1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(canvasPanelLayout.createSequentialGroup()
                .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                .addContainerGap())
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Rectangle", "Ellipse" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 469, Short.MAX_VALUE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 469, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void VisualizationBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualizationBoxActionPerformed
        /**
         * Visibility of density slider and label
         */
        if (info != null) {
            if (VisualizationBox.getSelectedItem().equals(VisualizationType.COLORMAP.toString())) {
                densLabel.setVisible(false);
                density.setVisible(false);
                colormapPanel.setVisible(true);
                shadersPanel.setVisible(false);
                info.setvType(VisualizationType.COLORMAP);

                updateHistograms();

            }
            if (VisualizationBox.getSelectedItem().equals(VisualizationType.TRANSPARENCY.toString())) {
                densLabel.setVisible(false);
                density.setVisible(false);
                colormapPanel.setVisible(false);
                shadersPanel.setVisible(true);
                info.setvType(VisualizationType.TRANSPARENCY);

            }

            if (VisualizationBox.getSelectedItem().equals(VisualizationType.VECTORS.toString())) {
                densLabel.setVisible(true);
                density.setVisible(true);
                colormapPanel.setVisible(false);
                shadersPanel.setVisible(false);
                info.setDensity(density.getValue());
                info.setIndicesForNormals(info.getGraph().indicesFordDensityNormals(density.getValue()));

                info.setvType(VisualizationType.VECTORS);
                updateHistograms();
            }
            canvas1.revalidate();
            canvas1.repaint();
            this.revalidate();
            this.repaint();
        }
    }//GEN-LAST:event_VisualizationBoxActionPerformed

    private void primaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_primaryColorPanelMouseClicked
        activeColorPanel = primaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_primaryColorPanelMouseClicked

    private void secondaryColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondaryColorPanelMouseClicked
        activeColorPanel = secondaryColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_secondaryColorPanelMouseClicked

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        if (!transpTresholdValueChanged) {
            transpTresholdValueChanged = true;
            transpSpinner.setValue((int)transparencySlider.getValue());
            setColors();
            transpTresholdValueChanged = false;
        }
    }//GEN-LAST:event_transparencySliderStateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        listener.setInnerSurfaceVisible(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void noneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneRadioButtonActionPerformed
        if (noneRadioButton.isSelected()) {
            listener.setFogVersion(0);
        }
    }//GEN-LAST:event_noneRadioButtonActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        if (jRadioButton2.isSelected()) {
            listener.setFogVersion(1);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        if (jRadioButton3.isSelected()) {
            listener.setFogVersion(2);
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        if (jRadioButton4.isSelected()) {
            listener.setFogVersion(3);
        }
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        listener.setUseGlyphs(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void fogColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fogColorPanelMouseClicked
        activeColorPanel = fogColorPanel;
        jColorChooser1.setColor(activeColorPanel.getBackground());
        colorDialog.setVisible(true);
    }//GEN-LAST:event_fogColorPanelMouseClicked

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        listener.setContours(jCheckBox7.isSelected());
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        if (info != null) {
            List<Float> hdDistance = info.getDistance();

            if (jComboBox2.getSelectedIndex() == 1) {         //absolute is set
                List<Float> absolute = new ArrayList<Float>();
                for (Float hdDistance1 : hdDistance) {
                    absolute.add(Math.abs(hdDistance1));
                }
                sorted = SortUtils.instance().sortValues(absolute);
                hdDistance = absolute;
                info.setDistance(hdDistance);
            } else {
                sorted = SortUtils.instance().sortValues(originalDist);
                info.setDistance(originalDist);
            }

            info.setUseRelative(jComboBox2.getSelectedIndex() == 0);

            updateHistograms();
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
        if (jComboBox4.getSelectedItem().equals(SelectionType.RECTANGLE.toString())) {
            hdp.getInfo().setsType(SelectionType.RECTANGLE);
        }
        if (jComboBox4.getSelectedItem().equals(SelectionType.ELLIPSE.toString())) {
            hdp.getInfo().setsType(SelectionType.ELLIPSE);
        }
        setSelection(selectionButton.isSelected());
    }//GEN-LAST:event_selectionButtonActionPerformed

    public void setSelection(boolean selection) {
        this.selection = selection;
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        clearSelection();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        colorDialog.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        colorDialog.setVisible(false);
        activeColorPanel.setBackground(jColorChooser1.getColor());

        try {

        } catch (NullPointerException ex) {
        }

        histogram1.repaint();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void canvas1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MousePressed
        mouseDraggedX = evt.getX();
        mouseDraggedY = evt.getY();

        if (selection && SwingUtilities.isLeftMouseButton(evt)) {
            clearSelection();
            listener.setSelectionStart(evt.getPoint());
        }

    }//GEN-LAST:event_canvas1MousePressed


    private void canvas1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MouseDragged
        if (SwingUtilities.isLeftMouseButton(evt)) {
            if (selection) {
                listener.setSelectionEnd(evt.getPoint(), canvas1.getWidth(), canvas1.getHeight());
            } else {
                float x = evt.getX();
                float y = evt.getY();
                Dimension size = evt.getComponent().getSize();
                float thetaY = 360.0f * ((x - mouseDraggedX) / (float) size.width);
                float thetaX = 360.0f * ((mouseDraggedY - y) / (float) size.height);

                listener.rotate(-thetaX, -thetaY);

                mouseDraggedX = x;
                mouseDraggedY = y;
            }
        } else if (SwingUtilities.isRightMouseButton(evt)) {

            float x = evt.getX();
            float y = evt.getY();
            Dimension size = evt.getComponent().getSize();
            float thetaX = 360.0f * ((x - mouseDraggedX) / (float) size.width);
            float thetaY = 360.0f * ((mouseDraggedY - y) / (float) size.height);

            listener.move(thetaX, -thetaY);

            mouseDraggedX = x;
            mouseDraggedY = y;

        }
    }//GEN-LAST:event_canvas1MouseDragged

    private void canvas1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvas1MouseWheelMoved
        if (evt.getWheelRotation() > 0) {
            listener.zoomIn(-5 * evt.getWheelRotation());
        } else {
            listener.zoomOut(5 * evt.getWheelRotation());

        }
    }//GEN-LAST:event_canvas1MouseWheelMoved

    private void canvas1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MouseReleased
        if (selection && SwingUtilities.isLeftMouseButton(evt)) {
            listener.setSelectionEnd(evt.getPoint(), canvas1.getWidth(), canvas1.getHeight());
            listener.setSelectionFinished(true);

            TimerTask tt = new TimerTask() {
                @Override
                public void run() {
                    updateHistograms();
                    adjustThresholds();
                    histogram1.resetSlider();
                }
            };
            Timer t = new Timer();
            t.schedule(tt, 500);
        }
    }//GEN-LAST:event_canvas1MouseReleased

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        setColors();
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        setColors();
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        if (jComboBox4.getSelectedItem().equals(SelectionType.RECTANGLE.toString())) {
            hdp.getInfo().setsType(SelectionType.RECTANGLE);
        }
        if (jComboBox4.getSelectedItem().equals(SelectionType.ELLIPSE.toString())) {
            hdp.getInfo().setsType(SelectionType.ELLIPSE);
        }
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        if (hdp != null) {
            hdp.getInfo().setColorScheme(ColorScheme.values()[jComboBox6.getSelectedIndex()]);
        }
    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void maxThresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxThresholdSliderStateChanged
        if (!maxTresholdValueChanged) {
            maxTresholdValueChanged = true;
            maxThresholdSpinner.setValue((int) maxThresholdSlider.getValue());
            setMaxthreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_maxThresholdSliderStateChanged


    private void maxThresholdSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxThresholdSpinnerStateChanged
        if (!maxTresholdValueChanged) {
            maxTresholdValueChanged = true;
            maxThresholdSlider.setValue((int) maxThresholdSpinner.getValue());
            setMaxthreshValue();
        }

        updateHistograms();
    }//GEN-LAST:event_maxThresholdSpinnerStateChanged

    public void adjustThresholds(){
        List<Float> l = sorted;
        int count = 0;
        int count2 = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) <= info.getMaxThreshValue()) {
                count++;
            }
            if (l.get(i) >= info.getMinThreshValue()) {
                count2++;
            }
        }
        minTresholdValueChanged = true;
        maxTresholdValueChanged = true;
        float percent = count / (float) l.size();
        maxThresholdSlider.setValue((int) (percent * 100));
        maxThresholdSpinner.setValue((int) (percent * 100));
        float percent2 = count2 / (float) l.size();
        minThreshSlider.setValue(100 - (int) (percent2 * 100));
        minThreshSpinner.setValue(100 - (int) (percent2 * 100));
        minTresholdValueChanged = false;
        maxTresholdValueChanged = false;
      
    }
    
    private void histogram1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_histogram1MouseDragged
        List<Float> l = sorted;
        int count = 0;
        int count2 = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) <= info.getMaxThreshValue()) {
                count++;
            }
            if (l.get(i) >= info.getMinThreshValue()) {
                count2++;
            }

        }
        if (histogram1.isMaxSliderSelected()) {
            float percent = count / (float) l.size();
            maxThresholdSlider.setValue((int) (percent * 100));
        }
        if (histogram1.isMinSliderSelected()) {
            float percent2 = count2 / (float) l.size();
            minThreshSlider.setValue(100 - (int) (percent2 * 100));
        }
    }//GEN-LAST:event_histogram1MouseDragged

    private void minThreshSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minThreshSliderStateChanged
        if (!minTresholdValueChanged) {
            minTresholdValueChanged = true;
            minThreshSpinner.setValue((int) minThreshSlider.getValue());

            setMinThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_minThreshSliderStateChanged

    private void minThreshSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minThreshSpinnerStateChanged
        if (!minTresholdValueChanged) {
            minTresholdValueChanged = true;
            minThreshSlider.setValue((int) minThreshSpinner.getValue());

            setMinThreshValue();
        }
        updateHistograms();
    }//GEN-LAST:event_minThreshSpinnerStateChanged

    private void transpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transpSpinnerStateChanged
        if (!transpTresholdValueChanged) {
            transpTresholdValueChanged = true;
            transparencySlider.setValue((int)transpSpinner.getValue());
            setColors();
            transpTresholdValueChanged = false;
        }
    }//GEN-LAST:event_transpSpinnerStateChanged

    private void setMaxthreshValue() {
        float usedValues;
        List<Float> list = info.getSortedDistance();
        
        if(list == null)
            list = SortUtils.instance().sortValues(info.getDistance());

        int size = list.size();
        int index = (int) (size * (maxThresholdSlider.getValue() / 100f));

        if (index == 0) {
            usedValues = list.get(0);
        } else {
            usedValues = list.get(index - 1);
        }

        info.setMaxThreshValue(usedValues);
        maxTresholdValueChanged = false;
    }

    private void setMinThreshValue() {

        List<Float> list = info.getSortedDistance();

        int size = list.size();

        float minUsedValues;
        int index = (int) (size * (minThreshSlider.getValue() / 100f));

        if (index == 0) {
            minUsedValues = list.get(0);
        } else {
            minUsedValues = list.get(index - 1);
        }

        info.setMinThreshValue(minUsedValues);
        minTresholdValueChanged = false;

    }

    public void clear() {

        listener.removeModel();
        maxTresholdValueChanged = false;
        minTresholdValueChanged = false;
        transpTresholdValueChanged = false;
        transparencySlider.setValue(100);
        transpSpinner.setValue(100);
        selection = false;
        VisualizationBox.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jComboBox6.setSelectedIndex(0);

    }

    public void setColors() {

        float[] color = new float[4];
        primaryColorPanel.getBackground().getRGBColorComponents(color);
        color[3] = jCheckBox3.isSelected() ? 1 : transparencySlider.getValue() / (float) 100;
        listener.setPrimaryColor(color);

        float[] color2 = new float[4];
        secondaryColorPanel.getBackground().getRGBColorComponents(color2);
        color2[3] = jCheckBox4.isSelected() ? 1 : transparencySlider.getValue() / (float) 100;
        listener.setSecondaryColor(color2);

        float[] color3 = new float[4];
        fogColorPanel.getBackground().getRGBColorComponents(color3);
        listener.setFogColor(color3);
    }

    public void updateHistograms() {

        if (hdp == null && info == null) {
            return;
        }
        
        if(hdp.getInfo().getMinThreshValue() < hdp.getInfo().getMinSelection()){
            hdp.getInfo().setMinSelection(hdp.getInfo().getMinThreshValue());
        }
        
         if(hdp.getInfo().getMaxThreshValue() > hdp.getInfo().getMaxSelection()){
            hdp.getInfo().setMaxSelection(hdp.getInfo().getMaxThreshValue());
        }

        List<Float> f = hdp.getInfo().getDistance();

        histogram1.setHdp(info);
        histogram1.setValues(f);
        histogram1.recomputeSliderPosition();

        histogram1.revalidate();
        histogram1.repaint();

        //    histogramPanel2.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox VisualizationBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private cz.fidentis.gui.Canvas canvas1;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JDialog colorDialog;
    private javax.swing.JPanel colormapPanel;
    private javax.swing.JLabel densLabel;
    private javax.swing.JSlider density;
    private javax.swing.JPanel fogColorPanel;
    private cz.fidentis.visualisation.histogram.histogramPanel histogram1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JSlider maxThresholdSlider;
    private javax.swing.JSpinner maxThresholdSpinner;
    private javax.swing.JSlider minThreshSlider;
    private javax.swing.JSpinner minThreshSpinner;
    private javax.swing.JRadioButton noneRadioButton;
    private javax.swing.JPanel primaryColorPanel;
    private javax.swing.JPanel secondaryColorPanel;
    private javax.swing.JToggleButton selectionButton;
    private javax.swing.JPanel shadersPanel;
    private javax.swing.JSpinner transpSpinner;
    private javax.swing.JSlider transparencySlider;
    // End of variables declaration//GEN-END:variables

    private void clearSelection() {
        listener.clearSelection();
        updateHistograms();
        adjustThresholds();
        histogram1.resetSlider();
    }

}
