/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.comparison_batch;

import cz.fidentis.comparison.RegistrationMethod;
import cz.fidentis.controller.BatchComparison;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.PairComparisonPanel;
import cz.fidentis.model.Model;
import cz.fidentis.model.ModelLoader;
import cz.fidentis.processing.comparison.surfaceComparison.SurfaceComparisonProcessing;
import cz.fidentis.visualisation.ColorScheme;
import cz.fidentis.visualisation.ColorSelector;
import cz.fidentis.visualisation.surfaceComparison.HDpainting;
import cz.fidentis.visualisation.surfaceComparison.HDpaintingInfo;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.SwingUtilities;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.util.List;
import javax.swing.JFrame;
import javax.vecmath.Vector4f;

/**
 *
 * @author Katka
 */
public class PlotsDrawingPanelBatchNumerical extends javax.swing.JPanel {

    private float values[][] = new float[50][50];
    private String modelNames[] = new String[50];
    private Rectangle2D activeArea = new Rectangle2D.Float();
    private Point lastClickedPoint;
    private boolean select = false;
    private float cellWidth;
    private float cellHeight;
    private long lastMovedTime;
    private Point mousePosition = new Point(0, 0);
    private Point slider1Tip = new Point(this.getWidth() - 50, 70);
    private int slider1P;
    private Point slider2Tip = new Point(this.getWidth() - 50, this.getHeight() - 70);
    private int slider2P;
    private boolean slider1Selected;
    private boolean slider2Selected;
    private ColorScheme scheme = ColorScheme.GREEN_BLUE;
    private static final float MINIMAL_HEIGHT = 30;
    private static final float MINIMAL_WIDTH = 50;
    private boolean zoom = false;
    private Rectangle2D[][] matrix = new Rectangle2D[50][50];
    private Point lastSelection = new Point(-1, -1);

    private float peakStrength = 5;

    /**
     * Creates new form plotsPanel
     */
    public PlotsDrawingPanelBatchNumerical() {
        initComponents();
        jPopupMenu1.setInvoker(this);

    }

    public void setScheme(ColorScheme scheme) {
        this.scheme = scheme;
    }

    public void setModelNames(String[] modelNames) {
        this.modelNames = modelNames;
    }

    public float[][] getValues() {
        return values;
    }

    public void setValues(float[][] values) {
        this.values = values;
        matrix = new Rectangle2D[values.length][values.length];
        this.repaint();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        pairFrame = new javax.swing.JFrame();
        pairComparisonPanel = new cz.fidentis.gui.PairComparisonPanel();

        jPopupMenu1.setInvoker(this);
        jPopupMenu1.add(jMenuItem1);
        jPopupMenu1.add(jMenuItem2);
        jPopupMenu1.add(jMenuItem3);

        org.openide.awt.Mnemonics.setLocalizedText(jMenuItem1, org.openide.util.NbBundle.getMessage(PlotsDrawingPanelBatchNumerical.class, "PlotsDrawingPanelBatchNumerical.jMenuItem1.text")); // NOI18N
        jMenuItem1.setComponentPopupMenu(jPopupMenu1);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        org.openide.awt.Mnemonics.setLocalizedText(jMenuItem2, org.openide.util.NbBundle.getMessage(PlotsDrawingPanelBatchNumerical.class, "PlotsDrawingPanelBatchNumerical.jMenuItem2.text")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        org.openide.awt.Mnemonics.setLocalizedText(jMenuItem3, org.openide.util.NbBundle.getMessage(PlotsDrawingPanelBatchNumerical.class, "PlotsDrawingPanelBatchNumerical.jMenuItem3.text")); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        javax.swing.GroupLayout pairFrameLayout = new javax.swing.GroupLayout(pairFrame.getContentPane());
        pairFrame.getContentPane().setLayout(pairFrameLayout);
        pairFrameLayout.setHorizontalGroup(
            pairFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pairComparisonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
        );
        pairFrameLayout.setVerticalGroup(
            pairFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pairComparisonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 471, Short.MAX_VALUE)
        );

        pairFrame.setSize(new Dimension(800,600));
        pairFrame.setLocationRelativeTo(GUIController.getSelectedProjectTopComponent());

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 500));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getX() > activeArea.getMinX() && evt.getY() > activeArea.getMinY() && evt.getX() < activeArea.getMaxX() && evt.getY() < activeArea.getMaxY()) {
            lastClickedPoint = evt.getPoint();
            int column = 0;
            int row = 0;

            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    if (matrix[i][j] != null && matrix[i][j].contains(lastClickedPoint)) {
                        column = i;
                        row = j;
                    }
                }
            }
            lastSelection = new Point(column, row);

            select = true;
            this.repaint();
            if (SwingUtilities.isRightMouseButton(evt)) {
                jPopupMenu1.setLocation(evt.getLocationOnScreen());
                jPopupMenu1.setVisible(true);
            } else if (SwingUtilities.isLeftMouseButton(evt)) {

                pairFrame.setVisible(true);
                pairComparisonPanel.clear();
                Runnable run = new Runnable() {

                    @Override
                    public void run() {
                        int size = values.length;
                        float x = mousePosition.x;
                        float y = mousePosition.y;
                        /*    int column = 0;
                        int row = 0;

                        for (int i = 0; i < matrix.length; i++) {
                            for (int j = 0; j < matrix.length; j++) {
                                if (matrix[i][j] != null && matrix[i][j].contains(mousePosition)) {
                                    column = i;
                                    row = j;
                                }
                            }
                        }*/

                        //                  int column = (int) Math.floor((x - 70) / (cellWidth + 1));
                        //                  int row = (int) Math.floor((y - 70) / (cellHeight + 1));
                        String model2 = modelNames[(int) values[size - 1][lastSelection.x]];
                        String model1 = modelNames[(int) values[lastSelection.y][size - 1]];
                        pairFrame.setTitle(model1 + " vs. " + model2);
                        BatchComparison bc = GUIController.getSelectedProjectTopComponent().getProject().getSelectedBatchComparison();
                        pairComparisonPanel.getListener().removeModel();
                        List<File> models;
                        if (bc.getRegistrationMethod() == RegistrationMethod.NO_REGISTRATION) {
                            models = bc.getModels();
                        } else {
                            models = bc.getRegistrationResults();
                        }

                        Model primary = ModelLoader.instance().loadModel(models.get(lastSelection.y), false, false);
                        pairComparisonPanel.getListener().addModel(primary);
                        pairComparisonPanel.getListener().addModel(ModelLoader.instance().loadModel(models.get(lastSelection.x), false, false));
                        List<Float> values = SurfaceComparisonProcessing.instance().numRawResForModel(bc.getHdCSVresults(), bc.getModels().size(), lastSelection.y, lastSelection.x, true);
                        HDpaintingInfo info = new HDpaintingInfo(values, primary, true);
                        HDpainting hdp = new HDpainting(info);
                        pairComparisonPanel.getListener().setHdPaint(hdp);
                        pairComparisonPanel.getListener().setHdInfo(info);
                        pairComparisonPanel.setInfo(hdp);
                        pairComparisonPanel.getListener().setPaintHD(true);
                        pairFrame.revalidate();
                    }

                };
                Thread t = new Thread(run);
                t.start();
            }

        } else {
            select = false;
        }
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    public void resetOrdering() {
        sortValuesByRow(true);
        sortValuesByColumn(true);
        this.repaint();

    }

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        slider1Tip = new Point(this.getWidth() - 50, 70);
        slider2Tip = new Point(this.getWidth() - 50, this.getHeight() - 70);
        select = false;
    }//GEN-LAST:event_formComponentResized

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        lastMovedTime = System.currentTimeMillis();
        mousePosition = new Point(evt.getX(), evt.getY());
        final PlotsDrawingPanelBatchNumerical pdp = this;
        Timer t = new Timer();
        t.schedule(new TimerTask() {

            @Override
            public void run() {
                pdp.repaint();
            }
        }, 2000);
        pdp.repaint();

    }//GEN-LAST:event_formMouseMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        int x = evt.getX() - slider1Tip.x;
        int y = evt.getY() - slider1Tip.y;
        if ((x > 0 && x < 20) && ((y > -(1 / 2f) * x && y <= 0) || (y < (1 / 2f) * x && y >= 0))) {

            slider1Selected = true;
            lastClickedPoint = evt.getPoint();
            slider1P = slider1Tip.y;
        }

        int x2 = evt.getX() - slider2Tip.x;
        int y2 = evt.getY() - slider2Tip.y;

        if ((x2 > 0 && x2 < 20) && ((y2 > -(1 / 2f) * x2 && y2 <= 0) || (y2 < (1 / 2f) * x2 && y2 >= 0))) {
            slider2Selected = true;
            lastClickedPoint = evt.getPoint();
            slider2P = slider2Tip.y;
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        slider1Selected = false;
        slider2Selected = false;
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (slider1Selected) {
            int y = evt.getY() - lastClickedPoint.y;
            if (slider1P + y < 70) {
                slider1Tip.y = 70;
            } else if ((slider1P + y) > slider2Tip.y - 20) {
                slider1Tip.y = slider2Tip.y - 20;
            } else {
                slider1Tip.y = slider1P + y;
            }
            this.repaint();
        } else if (slider2Selected) {
            int y = evt.getY() - lastClickedPoint.y;
            if (slider2P + y < slider1Tip.y + 20) {
                slider2Tip.y = slider1Tip.y + 20;
            } else if (slider2P + y > this.getHeight() - 70) {
                slider2Tip.y = this.getHeight() - 70;
            } else {
                slider2Tip.y = slider2P + y;
            }
            this.repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        resetOrdering();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        sortValuesByColumn(false);
        this.repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        sortValuesByRow(false);
        this.repaint();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setPaint(Color.WHITE);
        AffineTransform zoomt = g2.getTransform();
        //     zoomt.scale(zoomValue, zoomValue);
        //     g2.setTransform(zoomt);
        g2.fill(new Rectangle2D.Double(0, 0, this.getWidth(), this.getHeight()));
        int height = this.getHeight() - 140;

        paintGrdient(g2, this.getWidth() - 70, 70, height, 20);

        int numValuesX = values.length - 1;
        int numValuesY = values[0].length - 1;
        int width = this.getWidth() - 230;
        cellWidth = width / (float) numValuesX - 1;
        cellHeight = height / (float) numValuesY - 1;

        float zoomCellWidth = width / (float) numValuesX - 1;
        float zoomCellHeight = height / (float) numValuesY - 1;

        if (cellWidth < MINIMAL_WIDTH || cellHeight < MINIMAL_HEIGHT) {
            zoom = true;
        } else {
            zoom = false;
        }

        activeArea = new Rectangle2D.Float(70, 70, width, height);

        float maxValue = Float.MIN_VALUE;
        float minValue = Float.MAX_VALUE;
        for (int i = 0; i < numValuesX; i++) {
            for (int j = 0; j < numValuesY; j++) {
                if (values[i][j] > maxValue) {
                    maxValue = values[i][j];
                }
                if (values[i][j] < minValue) {
                    minValue = values[i][j];
                }
            }
        }

        FontMetrics fm = getFontMetrics(getFont());
        int h = fm.getHeight();
        if (cellHeight < h) {
            Font yFont = g2.getFont();
            g2.setFont(yFont.deriveFont(cellHeight));
        }

        float x = mousePosition.x;
        float y = mousePosition.y;
        int column = (int) Math.floor((x - 70) / (cellWidth + 1));
        int row = (int) Math.floor((y - 70) / (cellHeight + 1));

        float gauss = 0;
        int gauseWidth = (column - 1) > (numValuesX - column) ? (column - 1) : (numValuesX - column);
        if (activeArea.contains(mousePosition) && zoom) {
            for (int i = 0; i < numValuesX; i++) {
                gauss += getGauss(i, peakStrength, column, gauseWidth);
            }
            zoomCellWidth = width / gauss;
        }

        gauss = 0;
        int gauseHeight = (row - 1) > (numValuesY - row) ? (row - 1) : (numValuesY - row);
        if (activeArea.contains(mousePosition) && zoom) {
            for (int i = 0; i < numValuesY; i++) {
                gauss += getGauss(i, peakStrength, row, gauseHeight);
            }
            zoomCellHeight = height / gauss;
        }

        float gaussX = 0;
        for (int i = 0; i < numValuesX; i++) {
            float gaussY = 0;
            for (int j = 0; j < numValuesY; j++) {
                float currentWidth = getGauss(i, peakStrength, column, gauseWidth) * zoomCellWidth;
                float currentHeight = getGauss(j, peakStrength, row, gauseHeight) * zoomCellHeight;
                g2.setPaint(Color.BLACK);
                if (activeArea.contains(mousePosition) && zoom) {
                    if (j == 0) {
                        fm = getFontMetrics(getFont());
                        h = fm.getHeight();
                        if (currentWidth / 3 > h) {
                            g2.setFont(getFont().deriveFont(currentWidth / 3));
                        } else {
                            g2.setFont(getFont().deriveFont(h < currentWidth ? h : currentWidth));
                        }
                        fm = getFontMetrics(getFont());
                        int w = fm.stringWidth(Integer.toString((int) values[numValuesY][i] + 1));
                        g2.drawString(Integer.toString((int) values[numValuesY][i] + 1), 70 + gaussX + (currentWidth - w) / 2, 60);
                        g2.setFont(getFont().deriveFont(h));
                    }
                    if (i == 0) {
                        fm = getFontMetrics(getFont());
                        h = fm.getHeight();
                        if (currentHeight / 3 > h) {
                            g2.setFont(getFont().deriveFont(currentHeight / 3));
                        } else {
                            g2.setFont(getFont().deriveFont(h < currentHeight ? h : currentHeight));
                        }
                        fm = getFontMetrics(getFont());
                        int w = fm.stringWidth(Integer.toString((int) values[j][numValuesX] + 1));
                        g2.drawString(Integer.toString((int) values[j][numValuesX] + 1), 58 - w, 70 + gaussY + currentHeight);
                        g2.setFont(getFont().deriveFont(h));
                    }

                } else {
                    if (j == 0) {
                        fm = getFontMetrics(getFont());
                        h = fm.getHeight();
                        if (h > zoomCellHeight) {
                            h = (int) zoomCellHeight;
                        }
                        int w = fm.stringWidth(Integer.toString((int) values[numValuesY][i] + 1));
                        g2.drawString(Integer.toString((int) values[numValuesY][i] + 1), 55 + (3 - w), 70 + (i + 1) * cellHeight + i - (cellHeight - h));
                    }
                    if (i == 0) {
                        fm = getFontMetrics(getFont());
                        int w = fm.stringWidth(Integer.toString((int) values[j][numValuesX] + 1));

                        g2.drawString(Integer.toString((int) values[j][numValuesX] + 1), 70 + (j * cellWidth) + j + (cellWidth - w) / 2, 60);
                    }
                }

                float s1 = (slider1Tip.y - 70) * ((2f / 3f) / (this.getHeight() - 140));
                float s2 = (slider2Tip.y - 70) * ((2f / 3f) / (this.getHeight() - 140));
                float distance = (maxValue - minValue) / (2f / 3f);

                float v = values[i][j];
                v = (v - minValue) / distance;
                ColorSelector s = new ColorSelector();

                if (v >= s1 && v <= s2) {
                    Color c = s.chooseColor(minValue, maxValue, values[i][j], scheme);
                    g2.setPaint(c);
                } else {
                    g2.setPaint(Color.getHSBColor(1, 0, 0.5f));
                }

                if (activeArea.contains(mousePosition) && zoom) {
                    Rectangle2D r = new Rectangle2D.Double(70 + gaussX, 70 + gaussY, getGauss(i, peakStrength, column, gauseWidth) * zoomCellWidth, getGauss(j, peakStrength, row, gauseHeight) * zoomCellHeight);
                    g2.fill(r);
                    g2.setPaint(Color.WHITE);
                    g2.draw(r);
                    matrix[i][j] = r;
                } else {
                    Rectangle2D r = new Rectangle2D.Double(70 + (i * (cellWidth)) + i, 70 + (j * (cellHeight)) + j, cellWidth + 1, cellHeight + 1);
                    g2.fill(r);
                    g2.setPaint(Color.WHITE);
                    g2.draw(r);
                    matrix[i][j] = r;
                }
                gaussY += getGauss(j, peakStrength, row, gauseHeight) * zoomCellHeight;
            }
            gaussX += getGauss(i, peakStrength, column, gauseWidth) * zoomCellWidth;
        }

        paintSlider(g2, slider1Tip);

        paintSlider(g2, slider2Tip);

        paintScale(g2, maxValue, minValue,
                10);

        if (select
                == true && activeArea.contains(lastClickedPoint)) {
            paintSelection(g2, numValuesX, numValuesY);
        }

        if ((System.currentTimeMillis()
                - lastMovedTime) >= 1000 && mousePosition != null && activeArea.contains(mousePosition)) {
            paintToolTip(g2);
        }

        Font f = g2.getFont();
        Font fn = g2.getFont();

        g2.setPaint(Color.BLACK);

        g2.fill(
                new Rectangle2D.Double(35, 35, 200, 5));
        g2.fill(
                new Rectangle2D.Double(35, 35, 5, 200));

        int xPoints[] = {235, 250, 235};
        int yPoints[] = {30, 38, 45};

        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BICUBIC);

        g2.fill(
                new Polygon(xPoints, yPoints, 3));
        int xPoints1[] = {30, 38, 45};
        int yPoints1[] = {235, 250, 235};

        g2.fill(
                new Polygon(xPoints1, yPoints1, 3));

        fn.deriveFont(Font.BOLD,
                20f);
        g2.setFont(fn);

        g2.drawString(
                "Model #", 40, 30);

        AffineTransform at = g2.getTransform();

        at.rotate(
                -Math.PI / 2f, 30, 80);
        g2.setTransform(at);

        g2.drawString(
                "Model #", 30, 80);
        at = new AffineTransform();
        //    g2.setTransform(at);

        g2.setFont(f);
    }

    private float getGauss(int x, float peak, int center, int width) {
        float exp = -(float) (Math.pow(x - center, 2)) / width;
        float value = peak * (float) Math.exp(exp);
        return value + 1;
    }

    private void paintScale(Graphics2D g2, float max, float min, int steps) {
        g2.draw(new Line2D.Float(this.getWidth() - 70, 70, this.getWidth() - 70, this.getHeight() - 70));
        float stepHeight = (this.getHeight() - 140) / (float) steps;
        float step = (max - min) / (float) steps;
        for (int i = 0; i <= steps; i++) {
            g2.draw(new Line2D.Float(this.getWidth() - 80, 70 + (i * stepHeight), this.getWidth() - 70, 70 + (i * stepHeight)));
            float v = min + i * step;
            FontMetrics fm = getFontMetrics(getFont());
            float h = fm.getHeight();
            float w = fm.stringWidth(Float.toString(v));
            g2.drawString(Float.toString(v), this.getWidth() - 80 - w, 70 + (i * stepHeight) + (h / 3f));
        }

    }

    private void paintSlider(Graphics2D g2, Point sliderTip) {
        g2.setPaint(Color.BLACK);
        int xPoints[] = {(int) sliderTip.x, (int) sliderTip.x + 20, (int) sliderTip.x + 20};
        int yPoints[] = {(int) sliderTip.y, (int) sliderTip.y + -10, (int) sliderTip.y + 10};

        g2.draw(new Line2D.Float(new Point(sliderTip.x - 20, sliderTip.y), sliderTip));

        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g2.fill(new Polygon(xPoints, yPoints, 3));
    }

    private void paintGrdient(Graphics2D g2, float x, float y, float height, float width) {
        int parts = 50;
        float fraction = height / (float) parts;
        for (int i = 0; i < parts; i++) {
            ColorSelector s = new ColorSelector();
            Color hsb1 = s.chooseColor(0, (2 / 3f), ((2 / 3f) / (float) parts) * i, scheme);
            Color hsb2 = s.chooseColor(0, (2 / 3f), ((2 / 3f) / (float) parts) * (i + 1), scheme);

            float h = 70 + ((i + 1) * fraction);

            GradientPaint gp = new GradientPaint(0, y + (i * fraction), hsb1, 0, y + ((i + 1) * fraction), hsb2);
            g2.setPaint(gp);
            g2.fill(new Rectangle2D.Double(x, y + (i * fraction), width, fraction));
        }

    }

    private void paintSelection(Graphics2D g2, int numValuesX, int numValuesY) {
        if (select) {
            Rectangle2D r = matrix[lastSelection.x][lastSelection.y];
            
            g2.setPaint(Color.BLACK);
            g2.setStroke(new BasicStroke(2));
            g2.draw(new Rectangle2D.Double(r.getMinX(), 40, r.getWidth(), 31 + (numValuesY * (cellHeight + 1))));
            g2.draw(new Rectangle2D.Double(37, r.getMinY(), 34 + (numValuesX * (cellWidth + 1)), r.getHeight()));

            g2.setStroke(new BasicStroke(1));
        }

    }

    private void paintToolTip(Graphics2D g2) {
        int size = values.length;
        float x = mousePosition.x;
        float y = mousePosition.y;
        int column = 0;
        int row = 0;

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[i][j] != null && matrix[i][j].contains(mousePosition)) {
                    column = i;
                    row = j;
                }
            }
        }

        //     column = (int) Math.floor((x - 70) / (cellWidth + 1));
        //    row = (int) Math.floor((y - 70) / (cellHeight + 1));
        FontMetrics fm = getFontMetrics(getFont());

        String model2 = modelNames[(int) values[size - 1][column]];
        String model1 = modelNames[(int) values[row][size - 1]];
        float w = fm.stringWidth(model1) > fm.stringWidth(model2) ? fm.stringWidth(model1) : fm.stringWidth(model2);

        g2.setPaint(Color.WHITE);
        g2.fill(new Rectangle2D.Double(mousePosition.x - 30, mousePosition.y - 20, w + 10, 60));
        g2.setPaint(Color.BLACK);
        g2.draw(new Rectangle2D.Double(mousePosition.x - 30, mousePosition.y - 20, w + 10, 60));

        float v = values[column][row];
        g2.drawString(Float.toString(v), mousePosition.x - 25, mousePosition.y - 5);
        g2.drawString(model1, mousePosition.x - 25, mousePosition.y + 15);
        g2.drawString(model2, mousePosition.x - 25, mousePosition.y + 35);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private cz.fidentis.gui.PairComparisonPanel pairComparisonPanel;
    private javax.swing.JFrame pairFrame;
    // End of variables declaration//GEN-END:variables

    private void sortValuesByRow(boolean reset) {
        int row;
        if (!reset) {
            float x = lastClickedPoint.x;
            float y = lastClickedPoint.y;
            row =lastSelection.y; //(int) Math.floor((y - 70) / (cellHeight + 1));
        } else {
            row = values.length - 1;
        }

        for (int i = values.length - 2; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                int maxIdx = i;
                if (values[j][row] > values[maxIdx][row]) {
                    maxIdx = j;
                }
                for (int k = 0; k < values.length; k++) {
                    float tmp = values[maxIdx][k];
                    values[maxIdx][k] = values[i][k];
                    values[i][k] = tmp;
                }
            }
        }
    }

    public void setPeakStrength(float peakStrength) {
        this.peakStrength = peakStrength;
    }

    private void sortValuesByColumn(boolean reset) {
        int column;
        if (!reset) {
            float x = lastClickedPoint.x;
            float y = lastClickedPoint.y;
            column = lastSelection.x;//(int) Math.floor((x - 70) / (cellWidth + 1));
        } else {
            column = values[0].length - 1;
        }

        for (int i = values.length - 2; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                int maxIdx = i;
                if (values[column][j] > values[column][maxIdx]) {
                    maxIdx = j;
                }
                for (int k = 0; k < values.length; k++) {
                    float tmp = values[k][maxIdx];
                    values[k][maxIdx] = values[k][i];
                    values[k][i] = tmp;
                }
            }

        }
    }
}
